{
  "collection": {
    "item": [
      {
        "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
        "name": "Health Check",
        "request": {
          "description": {
            "content": "Check if Bitnob API is healthy and accessible",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
              "type": "text/javascript",
              "exec": [
                "pm.test('Health check successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('API is healthy', function () {",
                "    pm.expect(response).to.have.property('status');",
                "});"
              ],
              "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
            }
          }
        ]
      },
      {
        "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
        "name": "Ping API",
        "request": {
          "description": {
            "content": "Simple ping to test API connectivity",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "ping"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
              "type": "text/javascript",
              "exec": [
                "pm.test('Ping successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "console.log('üèì Ping response received');"
              ],
              "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
            }
          }
        ]
      },
      {
        "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
        "name": "Create Wallet",
        "request": {
          "description": {
            "content": "Create a new Bitcoin wallet for testing",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "wallets",
              "create"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b676d487-884e-4f58-bcce-2d98535da151",
              "type": "text/javascript",
              "exec": [
                "// Generate unique wallet name",
                "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                "pm.request.body.raw = JSON.stringify({",
                "    name: walletName,",
                "    description: 'SACCO Platform Test Wallet'",
                "});",
                "",
                "console.log('üì± Creating wallet:', walletName);"
              ],
              "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Wallet created successfully', function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Response contains wallet data', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('id');",
                "});",
                "",
                "// Store wallet ID for subsequent requests",
                "if (response.data && response.data.id) {",
                "    pm.collectionVariables.set('wallet_id', response.data.id);",
                "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                "}"
              ],
              "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
            }
          }
        ]
      },
      {
        "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
        "name": "Get Wallet Details",
        "request": {
          "description": {
            "content": "Get details of the created wallet",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "wallets",
              "{{wallet_id}}"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üîç Getting details for wallet:', walletId);"
              ],
              "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
              "type": "text/javascript",
              "exec": [
                "pm.test('Wallet details retrieved', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Wallet data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('balance');",
                "});",
                "",
                "console.log('üí∞ Wallet Balance:', response.data.balance);"
              ],
              "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
            }
          }
        ]
      },
      {
        "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
        "name": "Get Wallet Balance",
        "request": {
          "description": {
            "content": "Check the current balance of the wallet",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "wallets",
              "{{wallet_id}}",
              "balance"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üí∞ Checking balance for wallet:', walletId);"
              ],
              "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6bd620a7-be94-481d-9333-e61772762a72",
              "type": "text/javascript",
              "exec": [
                "pm.test('Balance retrieved successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Balance data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('available_balance');",
                "});",
                "",
                "console.log('üíµ Available Balance:', response.data.available_balance);"
              ],
              "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
            }
          }
        ]
      },
      {
        "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
        "name": "Create Lightning Invoice",
        "request": {
          "description": {
            "content": "Create a Lightning Network invoice for receiving payments",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "lightning",
              "invoice"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "",
                "// Create invoice for 1000 satoshis (0.00001 BTC)",
                "const invoiceData = {",
                "    amount: 1000,",
                "    description: 'SACCO Platform Savings Deposit Test',",
                "    reference: pm.collectionVariables.get('payment_reference'),",
                "    walletId: walletId",
                "};",
                "",
                "pm.request.body.raw = JSON.stringify(invoiceData);",
                "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
              ],
              "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
              "type": "text/javascript",
              "exec": [
                "pm.test('Lightning invoice created', function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Invoice contains payment request', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('payment_request');",
                "});",
                "",
                "// Store invoice ID for testing",
                "if (response.data && response.data.id) {",
                "    pm.collectionVariables.set('invoice_id', response.data.id);",
                "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                "}"
              ],
              "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
            }
          }
        ]
      },
      {
        "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
        "name": "Send Lightning Payment",
        "request": {
          "description": {
            "content": "Send a Lightning Network payment (requires valid invoice)",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "lightning",
              "send"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "",
                "// Example Lightning invoice for testing (use a real testnet invoice)",
                "const paymentData = {",
                "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                "    amount: 1000,",
                "    reference: pm.collectionVariables.get('payment_reference'),",
                "    narration: 'SACCO Platform Test Payment'",
                "};",
                "",
                "pm.request.body.raw = JSON.stringify(paymentData);",
                "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
              ],
              "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
              "type": "text/javascript",
              "exec": [
                "// Note: This will likely fail without a valid invoice",
                "if (pm.response.code === 200 || pm.response.code === 201) {",
                "    pm.test('Lightning payment sent successfully', function () {",
                "        pm.response.to.have.status(200);",
                "    });",
                "    ",
                "    const response = pm.response.json();",
                "    console.log('‚ö° Payment successful:', response);",
                "} else {",
                "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                "    console.log('Response:', pm.response.text());",
                "}"
              ],
              "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
            }
          }
        ]
      },
      {
        "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
        "name": "Generate Bitcoin Address",
        "request": {
          "description": {
            "content": "Generate a new Bitcoin address for receiving funds",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "bitcoin",
              "address",
              "{{wallet_id}}"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
              ],
              "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
              "type": "text/javascript",
              "exec": [
                "pm.test('Bitcoin address generated', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Address is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('address');",
                "});",
                "",
                "console.log('üè† Bitcoin Address:', response.data.address);"
              ],
              "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
            }
          }
        ]
      },
      {
        "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
        "name": "Get Exchange Rates",
        "request": {
          "description": {
            "content": "Get current Bitcoin exchange rates",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "rates"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "base",
                "value": "BTC"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
              "type": "text/javascript",
              "exec": [
                "pm.test('Exchange rates retrieved', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Rates data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "});",
                "",
                "if (response.data) {",
                "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                "}"
              ],
              "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
            }
          }
        ]
      },
      {
        "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
        "name": "Get Transaction History",
        "request": {
          "description": {
            "content": "Get transaction history for the wallet",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "transactions"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "walletId",
                "value": "{{wallet_id}}"
              },
              {
                "key": "limit",
                "value": "10"
              },
              {
                "key": "offset",
                "value": "0"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üìú Getting transaction history for wallet:', walletId);"
              ],
              "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
              "type": "text/javascript",
              "exec": [
                "pm.test('Transaction history retrieved', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('History data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.be.an('array');",
                "});",
                "",
                "console.log('üìú Transaction count:', response.data.length);"
              ],
              "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{api_key}}",
          "key": "token"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
            "",
            "// Set timestamp for reference generation",
            "pm.globals.set('timestamp', Date.now());",
            "",
            "// Generate unique reference for payments",
            "const reference = 'SACCO_' + pm.globals.get('timestamp');",
            "pm.collectionVariables.set('payment_reference', reference);",
            "",
            "// Log current environment",
            "console.log('üåç Environment: Sandbox');",
            "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
          ],
          "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "console.log('‚úÖ Response Status:', pm.response.code);",
            "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
            "",
            "// Basic response validation",
            "pm.test('Response status is successful', function () {",
            "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
            "});",
            "",
            "pm.test('Response time is acceptable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});",
            "",
            "// Log response for debugging",
            "if (pm.response.code >= 400) {",
            "    console.error('‚ùå Error Response:', pm.response.text());",
            "} else {",
            "    console.log('üìÑ Response Body:', pm.response.json());",
            "}"
          ],
          "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "https://sandboxapi.bitnob.co/api/v1",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "{{BITNOB_API_KEY}}",
        "key": "api_key"
      },
      {
        "type": "string",
        "value": "",
        "key": "wallet_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "invoice_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "payment_reference"
      }
    ],
    "info": {
      "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
      "name": "Bitnob API Testing Collection",
      "version": {
        "raw": "1.0.0",
        "major": 1,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "bitnob-sandbox-environment",
    "name": "Bitnob Sandbox Environment",
    "values": [
      {
        "description": {
          "content": "Your Bitnob API key for sandbox testing",
          "type": "text/plain"
        },
        "type": "any",
        "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
        "key": "BITNOB_API_KEY"
      },
      {
        "description": {
          "content": "Bitnob sandbox API base URL",
          "type": "text/plain"
        },
        "type": "any",
        "value": "https://sandboxapi.bitnob.co/api/v1",
        "key": "BITNOB_BASE_URL"
      },
      {
        "description": {
          "content": "Current environment (sandbox/production)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "sandbox",
        "key": "BITNOB_ENVIRONMENT"
      }
    ]
  },
  "globals": {
    "id": "d114eca2-a55f-4d56-9463-262024610db3",
    "values": [
      {
        "type": "any",
        "value": 1753375584276,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 37,
        "pending": 0,
        "failed": 10
      },
      "prerequests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 37,
        "pending": 0,
        "failed": 27
      },
      "testScripts": {
        "total": 20,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 17,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 249.6,
      "responseMin": 179,
      "responseMax": 785,
      "responseSd": 178.63885355655415,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753375570443,
      "completed": 1753375584618
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f5370e79-c45c-421c-838f-8c2e7658cd00",
          "httpRequestId": "f9042ca5-9cf3-43fb-bee4-ed3811768064"
        },
        "item": {
          "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Check if Bitnob API is healthy and accessible",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('API is healthy', function () {",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Check if Bitnob API is healthy and accessible",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "health"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e619d6cf-b6c6-41c3-a009-9539971f582c",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "eea7f294-3750-4ee6-9a5b-264267194536",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:12 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "119"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "495"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_0D89480FE6C44DBC975F7E76C79BCC97"
            },
            {
              "key": "ETag",
              "value": "W/\"77-FesNR6ZqF0EmtAuORS3lfcS0DFM\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              49,
              50,
              46,
              49,
              53,
              49,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 785,
          "responseSize": 119
        },
        "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Health check successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Health check successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "API is healthy",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "API is healthy",
              "message": "expected { ‚Ä¶(4) } to have property 'status'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7fb940d9-edbd-4ee0-a3e2-40e28a50c7c3",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a063ebfd-dfad-4d1b-98a6-2941763b5206"
        },
        "item": {
          "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
          "name": "Ping API",
          "request": {
            "description": {
              "content": "Simple ping to test API connectivity",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Ping successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('üèì Ping response received');"
                ],
                "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Simple ping to test API connectivity",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "ping"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "767be592-1b7b-4424-b9f0-db9811074810",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "364118eb-05dd-4cdd-8a57-5008f4b0cd84",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:13 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "115"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "495"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_CCC0A47B1C9D44969F13C9D2BFE801CF"
            },
            {
              "key": "ETag",
              "value": "W/\"73-UWTcIhDX26aMfYB27Z4Hz9qRKjw\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              112,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              112,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              49,
              51,
              46,
              54,
              51,
              55,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 193,
          "responseSize": 115
        },
        "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Ping successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Ping successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6038b0f1-1047-490f-a968-630d11497918",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "82d4e98e-472d-4350-a806-d257c15a1b82"
        },
        "item": {
          "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b676d487-884e-4f58-bcce-2d98535da151",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a new Bitcoin wallet for testing",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "wallets",
              "create"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5ad8385d-2bda-4b2d-a462-faa725023756",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "80",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"SACCO_Wallet_1753375574909\",\"description\":\"SACCO Platform Test Wallet\"}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "26a95fac-8549-4893-b262-f93b148704b8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:15 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "136"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "494"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_5A3E749B82F64B60883A2FF2D69181B2"
            },
            {
              "key": "ETag",
              "value": "W/\"88-UUhsxt7viN57S6Gm2WuAnMQaL0I\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              49,
              53,
              46,
              48,
              50,
              57,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 194,
          "responseSize": 136
        },
        "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Wallet created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Wallet created successfully",
              "message": "expected response to have status code 201 but got 404",
              "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response contains wallet data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains wallet data",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7c08d7e4-4777-4a1c-a6b8-3b5f775e27bf",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48fab723-b818-475f-9264-3c0a18d469bd"
        },
        "item": {
          "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "ff64736a-349d-4a17-b0ae-4f0d60293b42",
              "timestamp": 1753375576301,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Get details of the created wallet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "wallets",
              ""
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dac02884-4b8f-47f8-9935-9602a4632916",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6e29b9d1-deb8-49d9-90fd-c1eab9dd658a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:16 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "108"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "494"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_10B38DEF2815421DAF016B50B7B0E020"
            },
            {
              "key": "ETag",
              "value": "W/\"6c-5EQeFm5LBhY5Ev67cvRGABsaDGk\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              49,
              54,
              46,
              51,
              57,
              49,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 180,
          "responseSize": 108
        },
        "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 401 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 401 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Wallet details retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Wallet details retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Wallet data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Wallet data is valid",
              "message": "expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'",
              "stack": "AssertionError: expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'balance')",
              "checksum": "f355c3880dacb2836058d37ad87f8c47",
              "id": "6d335433-76a5-47c4-8e13-69b793026d6e",
              "timestamp": 1753375576581,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ede5b529-ee83-45fd-b21c-411e7c17cc14",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b698f2d8-61f3-4de9-b4c5-40e0b43dd8a5"
        },
        "item": {
          "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6bd620a7-be94-481d-9333-e61772762a72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "34cc6771-4423-4fc1-bf9a-03f12cc03161",
              "timestamp": 1753375577625,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Check the current balance of the wallet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "wallets",
              "",
              "balance"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c5c08ec4-0437-414e-9251-dedc80bc5ada",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c31f24ad-1411-45c7-b8ec-9286d0a30d7d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:17 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "139"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "493"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_EFC669AB2D474B74BA7BB0854463702A"
            },
            {
              "key": "ETag",
              "value": "W/\"8b-2hj2xy+6VntBnVe6fMta16h2v/w\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              47,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              47,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              49,
              55,
              46,
              55,
              49,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 185,
          "responseSize": 139
        },
        "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Balance retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Balance retrieved successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Balance data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Balance data is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'available_balance')",
              "checksum": "783b1d98b40940e1067f47fd0ff3385c",
              "id": "a915ad51-a1cc-4cda-b475-061d9cf2093f",
              "timestamp": 1753375577923,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1826fbb-a1c9-489a-b34b-dcd98ffd250a",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "37c0d8cd-a194-46cb-a9d6-ddb419b1717e"
        },
        "item": {
          "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "f44d76a4-b762-4bc7-96b1-61e5c716274f",
              "timestamp": 1753375578990,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Create a Lightning Network invoice for receiving payments",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "lightning",
              "invoice"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "39c80429-c4b7-461c-824d-7eeb1ad32a9f",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b3a1981b-417e-4c2c-bdce-e230b653c7cb",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:19 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "142"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "493"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_2A4BA62DF3304CABB350848030E83157"
            },
            {
              "key": "ETag",
              "value": "W/\"8e-oY+dl+txfi1oqTbusfriuE9UmNk\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              105,
              110,
              118,
              111,
              105,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              105,
              110,
              118,
              111,
              105,
              99,
              101,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              49,
              57,
              46,
              48,
              56,
              49,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 179,
          "responseSize": 142
        },
        "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Lightning invoice created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Lightning invoice created",
              "message": "expected response to have status code 201 but got 404",
              "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Invoice contains payment request",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Invoice contains payment request",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d369a375-738f-490d-9f2c-9d56caa6ebb1",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "632229ca-dab2-4676-ba8f-c3597e687af2"
        },
        "item": {
          "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
          "name": "Send Lightning Payment",
          "request": {
            "description": {
              "content": "Send a Lightning Network payment (requires valid invoice)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Example Lightning invoice for testing (use a real testnet invoice)",
                  "const paymentData = {",
                  "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                  "    amount: 1000,",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    narration: 'SACCO Platform Test Payment'",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(paymentData);",
                  "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                  "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                ],
                "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                "type": "text/javascript",
                "exec": [
                  "// Note: This will likely fail without a valid invoice",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Lightning payment sent successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö° Payment successful:', response);",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "2b2e5f75-0da2-4e3f-aa65-99b92ba484f6",
              "timestamp": 1753375580301,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Send a Lightning Network payment (requires valid invoice)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "lightning",
              "send"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09081af7-1f4b-4acd-bd31-9bd8510c08bb",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7d6a5e54-3007-4a5e-9a0a-80e8915e3216",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:20 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "136"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "492"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_C3909A1CDDDE4E02B64D18306C6CC8EE"
            },
            {
              "key": "ETag",
              "value": "W/\"88-togGPNF2l23F65VZ7C1EXGlzXEw\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              115,
              101,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              115,
              101,
              110,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              50,
              48,
              46,
              51,
              57,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 196,
          "responseSize": 136
        },
        "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2d77dd5d-76bf-45f0-86a3-9cb8bc17874b",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ebd4f08a-f334-4172-b49c-cc31c0cf4149"
        },
        "item": {
          "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "853c2386-f6ec-46ed-ac61-f9e4e6dc483d",
              "timestamp": 1753375581614,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Generate a new Bitcoin address for receiving funds",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "bitcoin",
              "address",
              ""
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b1b7081d-259f-431e-b129-7b889e2ae468",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0b540c34-792c-464d-80a0-5597cfd5654a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:21 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "140"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "492"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_F82C1E14C97B4CEFBF238E9182ED6D3B"
            },
            {
              "key": "ETag",
              "value": "W/\"8c-KXaptnbudxxaVjmr/jHyenWpOjA\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              98,
              105,
              116,
              99,
              111,
              105,
              110,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              47,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              98,
              105,
              116,
              99,
              111,
              105,
              110,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              47,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              50,
              49,
              46,
              54,
              57,
              55,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 184,
          "responseSize": 140
        },
        "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Bitcoin address generated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Bitcoin address generated",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Address is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Address is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'address')",
              "checksum": "c93e9f7fd14f904d306737dcd0467de4",
              "id": "1cad3229-6e18-4ca7-8b0c-75f11b32861c",
              "timestamp": 1753375581898,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "62694d42-cdc3-4b5a-9337-72ed01196d26",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b188b46-f467-4f1e-a031-fcb59e7c2020"
        },
        "item": {
          "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get current Bitcoin exchange rates",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "rates"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [
              {
                "key": "base",
                "value": "BTC"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "28d2a595-30dd-47ce-b453-51c304cc5f82",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "75767006-05f8-4d03-9e5b-f1d4b120d61e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "135"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "491"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_313F9F0A8C1646AEA858E574DD9B726E"
            },
            {
              "key": "ETag",
              "value": "W/\"87-pQVbHuwBFC/1eTvOHDcIQLswB3I\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              114,
              97,
              116,
              101,
              115,
              63,
              98,
              97,
              115,
              101,
              61,
              66,
              84,
              67,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              114,
              97,
              116,
              101,
              115,
              63,
              98,
              97,
              115,
              101,
              61,
              66,
              84,
              67,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              50,
              51,
              46,
              48,
              52,
              57,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 206,
          "responseSize": 135
        },
        "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Exchange rates retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Exchange rates retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Rates data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Rates data is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "83bce09b-fb7a-42c2-9c06-4efc7e9e9b71",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c8b0124-577b-4f45-ad03-9ef9918d98a9"
        },
        "item": {
          "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "4b05192f-acd5-45df-acef-614e78ec260c",
              "timestamp": 1753375584301,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Get transaction history for the wallet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "v1",
              "transactions"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [
              {
                "key": "walletId",
                "value": ""
              },
              {
                "key": "limit",
                "value": "10"
              },
              {
                "key": "offset",
                "value": "0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer ln.b9540004d209.1577b9b69d394eab0ace2c14c",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "74a7d0fa-6fcd-4ff6-af09-2212af5fe760",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "ln.b9540004d209.1577b9b69d394eab0ace2c14c",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d88ef631-2999-4d58-b440-81ff6c32e73d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 16:46:24 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "140"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "491"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753375592"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_D7A1E50D7E104648A8C45555534EAC36"
            },
            {
              "key": "ETag",
              "value": "W/\"8c-5zKvtanWSOUuEy2u0cxcTMI5EC4\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              49,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              63,
              119,
              97,
              108,
              108,
              101,
              116,
              73,
              100,
              61,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              38,
              111,
              102,
              102,
              115,
              101,
              116,
              61,
              48,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              54,
              58,
              52,
              54,
              58,
              50,
              52,
              46,
              52,
              48,
              51,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 194,
          "responseSize": 140
        },
        "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 401 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 401 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Transaction history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Transaction history retrieved",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "History data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "History data is valid",
              "message": "expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'",
              "stack": "AssertionError: expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'length')",
              "checksum": "e774b6286904655bab7fadbd0aa88e6c",
              "id": "74bc96d8-f0b2-478b-ace7-2d348f963fb5",
              "timestamp": 1753375584605,
              "stacktrace": []
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1310
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "4c89b74f329f32b4f5b74c5086aa471f",
          "id": "5a52a53c-136b-4c5d-b0fe-1f193b0b15fe",
          "timestamp": 1753375572430,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Check if Bitnob API is healthy and accessible",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('API is healthy', function () {",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f5370e79-c45c-421c-838f-8c2e7658cd00",
          "httpRequestId": "f9042ca5-9cf3-43fb-bee4-ed3811768064",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "eda26d25-c52d-4a48-b871-7b83ff9935c3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Health check successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "3a04d3d7cca1e16d11bc2d4539142324",
          "id": "c75da2a5-bf68-4394-8262-91f7ffe69db0",
          "timestamp": 1753375572475,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Check if Bitnob API is healthy and accessible",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('API is healthy', function () {",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f5370e79-c45c-421c-838f-8c2e7658cd00",
          "httpRequestId": "f9042ca5-9cf3-43fb-bee4-ed3811768064",
          "scriptId": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
          "execution": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "API is healthy",
          "message": "expected { ‚Ä¶(4) } to have property 'status'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'status'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "bc6ed663118fd7afd7d4bb2e9ca2324d",
          "id": "6ef09c3d-e8eb-48a6-9116-fdbb2239f6a8",
          "timestamp": 1753375572482,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Check if Bitnob API is healthy and accessible",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('API is healthy', function () {",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f5370e79-c45c-421c-838f-8c2e7658cd00",
          "httpRequestId": "f9042ca5-9cf3-43fb-bee4-ed3811768064",
          "scriptId": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
          "execution": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "feb4b09fa62abbf5e8de9edd434e66b9",
          "id": "cac023da-f2a4-4bc4-bac0-0c79aead55ca",
          "timestamp": 1753375573781,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
          "name": "Ping API",
          "request": {
            "description": {
              "content": "Simple ping to test API connectivity",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Ping successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('üèì Ping response received');"
                ],
                "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7fb940d9-edbd-4ee0-a3e2-40e28a50c7c3",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a063ebfd-dfad-4d1b-98a6-2941763b5206",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "0bcdecbc-a148-42ec-bcc4-d2828513c26b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Ping successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "350d1f9a100add0d627b5bd2cf263cd9",
          "id": "679bc0bb-5632-4b13-82ac-8ecd625fc101",
          "timestamp": 1753375573834,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
          "name": "Ping API",
          "request": {
            "description": {
              "content": "Simple ping to test API connectivity",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Ping successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('üèì Ping response received');"
                ],
                "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7fb940d9-edbd-4ee0-a3e2-40e28a50c7c3",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a063ebfd-dfad-4d1b-98a6-2941763b5206",
          "scriptId": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
          "execution": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "b6d9f95eef982bf6cdc38696946c45fa",
          "id": "52f0c528-0b5b-4005-be27-b71b97df429c",
          "timestamp": 1753375575181,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b676d487-884e-4f58-bcce-2d98535da151",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6038b0f1-1047-490f-a968-630d11497918",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "82d4e98e-472d-4350-a806-d257c15a1b82",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "d5e30311-a6f0-4a10-8d34-afbe89df2920"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Wallet created successfully",
          "message": "expected response to have status code 201 but got 404",
          "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "986093bcac089cd4c190704b8a0bed90",
          "id": "c931059e-9ffc-4fbb-b38b-789cd3605e6f",
          "timestamp": 1753375575231,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b676d487-884e-4f58-bcce-2d98535da151",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6038b0f1-1047-490f-a968-630d11497918",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "82d4e98e-472d-4350-a806-d257c15a1b82",
          "scriptId": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
          "execution": "1c119b45-eefc-4246-a240-651172d1c2d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains wallet data",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "ad693fe3c5d54348f827fddd990b049e",
          "id": "ee776eed-e0ce-4035-aa60-4f85747f2d44",
          "timestamp": 1753375575235,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b676d487-884e-4f58-bcce-2d98535da151",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6038b0f1-1047-490f-a968-630d11497918",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "82d4e98e-472d-4350-a806-d257c15a1b82",
          "scriptId": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
          "execution": "1c119b45-eefc-4246-a240-651172d1c2d3"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "ff64736a-349d-4a17-b0ae-4f0d60293b42",
          "timestamp": 1753375576301,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7c08d7e4-4777-4a1c-a6b8-3b5f775e27bf",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "scriptId": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 401 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 401 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "9869e9be9a1d711d6cfd0978f9ec3538",
          "id": "ca7a878f-294d-4492-8ca0-c68854af494e",
          "timestamp": 1753375576524,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7c08d7e4-4777-4a1c-a6b8-3b5f775e27bf",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48fab723-b818-475f-9264-3c0a18d469bd",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "15e4d49b-b441-49d2-8936-d7348d70085c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Wallet details retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "eae9f1f9a735acd43b5d5e9a7747a1fe",
          "id": "58d05911-a12c-4d16-9e87-ded3a0478e37",
          "timestamp": 1753375576569,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7c08d7e4-4777-4a1c-a6b8-3b5f775e27bf",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48fab723-b818-475f-9264-3c0a18d469bd",
          "scriptId": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
          "execution": "573ff459-9d9a-4c80-9075-c879bf16a78e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Wallet data is valid",
          "message": "expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'",
          "stack": "AssertionError: expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "d5d44eae442a011a93460f6d0ecdedd2",
          "id": "9f26878a-7eb4-48b2-b9de-90fe710b5055",
          "timestamp": 1753375576573,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7c08d7e4-4777-4a1c-a6b8-3b5f775e27bf",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48fab723-b818-475f-9264-3c0a18d469bd",
          "scriptId": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
          "execution": "573ff459-9d9a-4c80-9075-c879bf16a78e"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'balance')",
          "checksum": "f355c3880dacb2836058d37ad87f8c47",
          "id": "6d335433-76a5-47c4-8e13-69b793026d6e",
          "timestamp": 1753375576581,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7c08d7e4-4777-4a1c-a6b8-3b5f775e27bf",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48fab723-b818-475f-9264-3c0a18d469bd",
          "scriptId": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "34cc6771-4423-4fc1-bf9a-03f12cc03161",
          "timestamp": 1753375577625,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6bd620a7-be94-481d-9333-e61772762a72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ede5b529-ee83-45fd-b21c-411e7c17cc14",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "scriptId": "82fdc81f-5435-4ea2-9339-6c8bd38afd35"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "5329038d04c8206a016fcda1bc1c87ad",
          "id": "4d980f6b-0ef2-4f8a-9e67-7ec9a94f4800",
          "timestamp": 1753375577868,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6bd620a7-be94-481d-9333-e61772762a72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ede5b529-ee83-45fd-b21c-411e7c17cc14",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b698f2d8-61f3-4de9-b4c5-40e0b43dd8a5",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "d13e4a3d-684f-44e2-8ed4-7c4c32bbfac0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Balance retrieved successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "d2b2a0f6d7b680cfb0869b09963e27f4",
          "id": "72df136a-49b0-4e93-addf-4a93a4940d98",
          "timestamp": 1753375577915,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6bd620a7-be94-481d-9333-e61772762a72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ede5b529-ee83-45fd-b21c-411e7c17cc14",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b698f2d8-61f3-4de9-b4c5-40e0b43dd8a5",
          "scriptId": "6bd620a7-be94-481d-9333-e61772762a72",
          "execution": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Balance data is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "3bd0ec9306585ed400a956e55a0deaaf",
          "id": "74373a17-7f00-4a7f-9d21-f72884609d03",
          "timestamp": 1753375577918,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6bd620a7-be94-481d-9333-e61772762a72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ede5b529-ee83-45fd-b21c-411e7c17cc14",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b698f2d8-61f3-4de9-b4c5-40e0b43dd8a5",
          "scriptId": "6bd620a7-be94-481d-9333-e61772762a72",
          "execution": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'available_balance')",
          "checksum": "783b1d98b40940e1067f47fd0ff3385c",
          "id": "a915ad51-a1cc-4cda-b475-061d9cf2093f",
          "timestamp": 1753375577923,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6bd620a7-be94-481d-9333-e61772762a72",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ede5b529-ee83-45fd-b21c-411e7c17cc14",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b698f2d8-61f3-4de9-b4c5-40e0b43dd8a5",
          "scriptId": "6bd620a7-be94-481d-9333-e61772762a72"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "f44d76a4-b762-4bc7-96b1-61e5c716274f",
          "timestamp": 1753375578990,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a1826fbb-a1c9-489a-b34b-dcd98ffd250a",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "scriptId": "ff8bf88c-b6c3-4595-b240-e9055c63bca0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "539e56db1af97c98733aeee8b4cd5ba7",
          "id": "e7392a25-b6ef-4ffe-8190-1d03e95e1f9a",
          "timestamp": 1753375579213,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a1826fbb-a1c9-489a-b34b-dcd98ffd250a",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "37c0d8cd-a194-46cb-a9d6-ddb419b1717e",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "d7521cc9-41b0-4f0b-8abd-4017cd1e7c6e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Lightning invoice created",
          "message": "expected response to have status code 201 but got 404",
          "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "c084da819e8b7bf14857cd582db3ea87",
          "id": "efaa8003-f7f5-475c-81cf-706c0f4f81ef",
          "timestamp": 1753375579258,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a1826fbb-a1c9-489a-b34b-dcd98ffd250a",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "37c0d8cd-a194-46cb-a9d6-ddb419b1717e",
          "scriptId": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
          "execution": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Invoice contains payment request",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "0fb653276afca0329fcc69513bd8a053",
          "id": "bbe87704-3504-4f6b-b710-60feff4395e7",
          "timestamp": 1753375579262,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a1826fbb-a1c9-489a-b34b-dcd98ffd250a",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "37c0d8cd-a194-46cb-a9d6-ddb419b1717e",
          "scriptId": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
          "execution": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "2b2e5f75-0da2-4e3f-aa65-99b92ba484f6",
          "timestamp": 1753375580301,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
          "name": "Send Lightning Payment",
          "request": {
            "description": {
              "content": "Send a Lightning Network payment (requires valid invoice)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Example Lightning invoice for testing (use a real testnet invoice)",
                  "const paymentData = {",
                  "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                  "    amount: 1000,",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    narration: 'SACCO Platform Test Payment'",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(paymentData);",
                  "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                  "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                ],
                "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                "type": "text/javascript",
                "exec": [
                  "// Note: This will likely fail without a valid invoice",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Lightning payment sent successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö° Payment successful:', response);",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d369a375-738f-490d-9f2c-9d56caa6ebb1",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "scriptId": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8d9b489a97aeed2ebb3b8adb463fe14f",
          "id": "2803c278-b555-408b-8074-dce87576b50b",
          "timestamp": 1753375580542,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
          "name": "Send Lightning Payment",
          "request": {
            "description": {
              "content": "Send a Lightning Network payment (requires valid invoice)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Example Lightning invoice for testing (use a real testnet invoice)",
                  "const paymentData = {",
                  "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                  "    amount: 1000,",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    narration: 'SACCO Platform Test Payment'",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(paymentData);",
                  "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                  "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                ],
                "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                "type": "text/javascript",
                "exec": [
                  "// Note: This will likely fail without a valid invoice",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Lightning payment sent successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö° Payment successful:', response);",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d369a375-738f-490d-9f2c-9d56caa6ebb1",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "632229ca-dab2-4676-ba8f-c3597e687af2",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "dc7137ff-f718-4259-a776-a3ad615f1f58"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "853c2386-f6ec-46ed-ac61-f9e4e6dc483d",
          "timestamp": 1753375581614,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2d77dd5d-76bf-45f0-86a3-9cb8bc17874b",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "scriptId": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "2ea9eecdfd2397af56f86c600fc02cc1",
          "id": "9aa7c913-2ee3-47e1-8c03-c9a84699b8ef",
          "timestamp": 1753375581842,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2d77dd5d-76bf-45f0-86a3-9cb8bc17874b",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ebd4f08a-f334-4172-b49c-cc31c0cf4149",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "768566d9-fcf3-433f-b21a-3e2c1fd344cc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Bitcoin address generated",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "9647e9501f188bc218a7b75d3faf3cf4",
          "id": "06eb35da-e17d-420f-9a50-68858cdee64f",
          "timestamp": 1753375581887,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2d77dd5d-76bf-45f0-86a3-9cb8bc17874b",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ebd4f08a-f334-4172-b49c-cc31c0cf4149",
          "scriptId": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
          "execution": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Address is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "d7d5b9e17d101e3ce382aebed405e139",
          "id": "7f5171bf-77ff-4550-af9c-cc4972d0524c",
          "timestamp": 1753375581891,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2d77dd5d-76bf-45f0-86a3-9cb8bc17874b",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ebd4f08a-f334-4172-b49c-cc31c0cf4149",
          "scriptId": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
          "execution": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'address')",
          "checksum": "c93e9f7fd14f904d306737dcd0467de4",
          "id": "1cad3229-6e18-4ca7-8b0c-75f11b32861c",
          "timestamp": 1753375581898,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2d77dd5d-76bf-45f0-86a3-9cb8bc17874b",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ebd4f08a-f334-4172-b49c-cc31c0cf4149",
          "scriptId": "93a62f56-cd10-43fe-9e6b-00117dd4867e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "429a73618822db9ef201fe2fdab04f25",
          "id": "796fa962-7cb1-4792-bbd8-44bfc3e152e2",
          "timestamp": 1753375583194,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "62694d42-cdc3-4b5a-9337-72ed01196d26",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b188b46-f467-4f1e-a031-fcb59e7c2020",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "f0857878-d729-4f14-bccc-916d062e669f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Exchange rates retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "86aaee5be74e5ac61647aebc4bcd3785",
          "id": "0911c5d9-85b8-41fb-b054-4727e9122b2b",
          "timestamp": 1753375583245,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "62694d42-cdc3-4b5a-9337-72ed01196d26",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b188b46-f467-4f1e-a031-fcb59e7c2020",
          "scriptId": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
          "execution": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Rates data is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "93dcc1d83321de31f76c3cc5c1c63bbc",
          "id": "ee5b9880-fb3f-42f2-ad5f-4694863807d1",
          "timestamp": 1753375583247,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "62694d42-cdc3-4b5a-9337-72ed01196d26",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0b188b46-f467-4f1e-a031-fcb59e7c2020",
          "scriptId": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
          "execution": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "4b05192f-acd5-45df-acef-614e78ec260c",
          "timestamp": 1753375584301,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "83bce09b-fb7a-42c2-9c06-4efc7e9e9b71",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "scriptId": "0811c0cd-6488-4c71-a1e9-2822e8873a0b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 401 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 401 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "284aad3236bea676fa1b29a49b1cb6bf",
          "id": "35db5a6e-edb6-46dd-ad73-988f70691e00",
          "timestamp": 1753375584552,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "83bce09b-fb7a-42c2-9c06-4efc7e9e9b71",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c8b0124-577b-4f45-ad03-9ef9918d98a9",
          "scriptId": "9f11976e-9ff0-435e-999a-b4a48404a0df",
          "execution": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Transaction history retrieved",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "0f453b2a532c6cf0607d1a6af69e7dc3",
          "id": "8de876c2-d8e5-4027-8d16-458fa8662e63",
          "timestamp": 1753375584593,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "83bce09b-fb7a-42c2-9c06-4efc7e9e9b71",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c8b0124-577b-4f45-ad03-9ef9918d98a9",
          "scriptId": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
          "execution": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "History data is valid",
          "message": "expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'",
          "stack": "AssertionError: expected { message: 'Unauthorized', ‚Ä¶(3) } to have property 'data'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "d14a79494e4f0cb96d8d1fdcb10b6056",
          "id": "728aad69-c0ae-45be-8230-b543b8139d62",
          "timestamp": 1753375584597,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "83bce09b-fb7a-42c2-9c06-4efc7e9e9b71",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c8b0124-577b-4f45-ad03-9ef9918d98a9",
          "scriptId": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
          "execution": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'length')",
          "checksum": "e774b6286904655bab7fadbd0aa88e6c",
          "id": "74bc96d8-f0b2-478b-ace7-2d348f963fb5",
          "timestamp": 1753375584605,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "b8f0538b-68cb-422b-80d9-26c94dc182cd",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96aff65-a113-404f-b83d-0a1ce85d11cb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "5a9ec5a3-ec06-42d1-a24a-fee071b51b2a"
                  }
                }
              ]
            },
            {
              "id": "efcaf79f-82fb-4a79-86ae-7fe3c95c1e23",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "667b839f-b680-4e16-8848-c1ddbf2de9f6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "8ef89653-0c45-40b1-a55c-83ce6ed2b0aa"
                  }
                }
              ]
            },
            {
              "id": "5f6f1f86-0f7b-4672-9b19-b36d311e6be3",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b676d487-884e-4f58-bcce-2d98535da151",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "207e3dac-8fbe-40cb-836e-c7dc39281446"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "67586519-56c9-4f6f-afd4-fa8aff5baef8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "1c119b45-eefc-4246-a240-651172d1c2d3"
                  }
                }
              ]
            },
            {
              "id": "6ccac302-a2bf-479f-b7b2-6354ac032378",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b67deccb-4ccd-4149-bb29-74c5e4a5b1e7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "5a24befe-22c9-4a29-95da-aacee1446225"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a17774f7-449b-4e6d-84d8-a45ae17cc0f5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "573ff459-9d9a-4c80-9075-c879bf16a78e"
                  }
                }
              ]
            },
            {
              "id": "3bfefa21-c80f-431c-99ed-7556192d2d1b",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "82fdc81f-5435-4ea2-9339-6c8bd38afd35",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "877ff997-aee6-4c07-8b9e-884df35780ba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6bd620a7-be94-481d-9333-e61772762a72",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "9795b096-7090-44ab-ab0e-3fd866ba2bd5"
                  }
                }
              ]
            },
            {
              "id": "9b833038-d115-4a2e-9789-fe4a54b2b4bd",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ff8bf88c-b6c3-4595-b240-e9055c63bca0",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "fae36482-c8f1-4e17-8230-a8afb58f42d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "c0e123f9-c0c8-4c75-9f96-8aa77696fa0f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "808d3435-2b60-4f50-93c8-d7dacf174d7e"
                  }
                }
              ]
            },
            {
              "id": "6d3718c8-b297-4ddb-ad69-e086fcfc32c0",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d9c684a7-d5c3-4a29-8c7c-ff9cb55171f5",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "89d2a85b-03ec-4fda-b7ee-b409e932d16b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fcc2dd0c-ac65-4cfe-939d-d1771a2eb570",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "5f5e2318-2f8e-4e17-8e49-b06d42cc262f"
                  }
                }
              ]
            },
            {
              "id": "b8fb1a40-1829-4467-bf58-469b12eef3ed",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "92cb6a9a-f250-4361-ad9f-cfb4485eeebf",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "175ee37e-e055-4b3e-9a4f-dddfffd8adc9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "93a62f56-cd10-43fe-9e6b-00117dd4867e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "ca78d7b9-faea-42ba-bc78-88d775f69dc6"
                  }
                }
              ]
            },
            {
              "id": "544f8689-03e2-4d62-96f9-1c0dfb370ae1",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "372c5dfb-6a7c-4c5b-b676-345befabc22e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "ffc2d382-90eb-4b68-bb55-a8fd259be994"
                  }
                }
              ]
            },
            {
              "id": "9a6f0c96-eb11-4930-a82d-a91ad42b7d23",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0811c0cd-6488-4c71-a1e9-2822e8873a0b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "9a56f36b-8d05-42f2-bb7a-ab2cb2aed45b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "b366e8ea-c2cf-46f2-9167-b8ce52070126"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5d52c7d3-6e64-4977-b4b0-5358731fe7a2",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "0744d5fb-1440-484a-85e5-0b4eb53efee5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9f11976e-9ff0-435e-999a-b4a48404a0df",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "084eaffd-3468-4c73-a1f7-66d9591e60d1"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co/api/v1",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "d8770e9a-b3c2-4721-ad98-ec348246e08b",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "83bce09b-fb7a-42c2-9c06-4efc7e9e9b71",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c8b0124-577b-4f45-ad03-9ef9918d98a9",
          "scriptId": "3e8727fb-852f-4bed-b97a-ec6a82ef1aef"
        }
      }
    ],
    "error": null
  }
}