exports.id=560,exports.ids=[560],exports.modules={39727:()=>{},47990:()=>{},56621:(a,b,c)=>{"use strict";c.d(b,{ND:()=>g,nl:()=>i,zw:()=>h});var d=c(66437);let e="https://zvelgxclmqgohntjimyf.supabase.co",f="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp2ZWxneGNsbXFnb2hudGppbXlmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkyOTkzMDUsImV4cCI6MjA2NDg3NTMwNX0.CFdW-XH8y7hkOm7LUtqQxs36hPTRBYtha4EIeRhIXto";if(!e||!f)throw Error("Missing Supabase environment variables");let g=(0,d.UU)(e,f,{auth:{autoRefreshToken:!0,persistSession:!0,detectSessionInUrl:!0},global:{fetch:(a,b={})=>fetch(a,{...b,signal:AbortSignal.timeout(3e4)})},db:{schema:"public"},realtime:{params:{eventsPerSecond:10}}}),h=()=>{let a=process.env.SUPABASE_SERVICE_ROLE_KEY;if(!a)throw Error("Missing SUPABASE_SERVICE_ROLE_KEY environment variable");return(0,d.UU)(e,a,{auth:{autoRefreshToken:!1,persistSession:!1}})},i=a=>(console.error("Supabase error:",a),a?.code==="PGRST116")?"No data found":a?.code==="23505"?"Record already exists":a?.code==="23503"?"Referenced record not found":a?.message||"An unexpected error occurred"},78335:()=>{},82433:(a,b,c)=>{"use strict";c.d(b,{Yc:()=>h,iv:()=>g});class d{constructor(){this.lightningPayments=[],this.crossBorderTransfers=[],this.virtualCards=[],this.usdtOperations=[]}static getInstance(){return d.instance||(d.instance=new d),d.instance}async createLightningInvoice(a,b){let c={id:`ln_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:a,status:"pending",invoice:`lnbc${a}n1p${Math.random().toString(36).substr(2,20)}`,timestamp:new Date().toISOString()};return this.lightningPayments.push(c),setTimeout(()=>{c.status=Math.random()>.1?"completed":"failed"},2e3),c}async sendLightningPayment(a,b){let c={id:`ln_pay_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:b,status:"pending",timestamp:new Date().toISOString()};return this.lightningPayments.push(c),setTimeout(()=>{c.status=Math.random()>.15?"completed":"failed"},3e3),c}async getLightningPayments(){return this.lightningPayments}async initiateCrossBorderTransfer(a,b,c){let d={id:`cb_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:a,currency:b,recipientCountry:c,status:"processing",exchangeRate:{USD:1,NGN:750,KES:130,GHS:12,EUR:.85,GBP:.75}[b]||1,timestamp:new Date().toISOString()};return this.crossBorderTransfers.push(d),setTimeout(()=>{d.status=Math.random()>.05?"completed":"failed"},5e3*Math.random()+5e3),d}async getCrossBorderTransfers(){return this.crossBorderTransfers}async createVirtualCard(a="visa"){let b={id:`card_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,cardNumber:this.generateCardNumber(a),expiryDate:this.generateExpiryDate(),status:"active",balance:0,type:a};return this.virtualCards.push(b),b}async fundVirtualCard(a,b){let c=this.virtualCards.find(b=>b.id===a);return!!c&&(c.balance+=b,!0)}async getVirtualCards(){return this.virtualCards}async freezeVirtualCard(a){let b=this.virtualCards.find(b=>b.id===a);return!!b&&(b.status="blocked",!0)}async buyUSDT(a){let b={id:`usdt_buy_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:a,type:"buy",status:"pending",rate:1+(Math.random()-.5)*.02,timestamp:new Date().toISOString()};return this.usdtOperations.push(b),setTimeout(()=>{b.status=Math.random()>.05?"completed":"failed"},2e3),b}async sellUSDT(a){let b={id:`usdt_sell_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:a,type:"sell",status:"pending",rate:1+(Math.random()-.5)*.02,timestamp:new Date().toISOString()};return this.usdtOperations.push(b),setTimeout(()=>{b.status=Math.random()>.05?"completed":"failed"},2e3),b}async transferUSDT(a,b){let c={id:`usdt_transfer_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,amount:a,type:"transfer",status:"pending",rate:1,timestamp:new Date().toISOString()};return this.usdtOperations.push(c),setTimeout(()=>{c.status=Math.random()>.1?"completed":"failed"},1500),c}async getUSDTOperations(){return this.usdtOperations}generateCardNumber(a){let b="visa"===a?"4":"5";for(let a=1;a<16;a++)b+=Math.floor(10*Math.random());return b.replace(/(.{4})/g,"$1 ").trim()}generateExpiryDate(){let a=new Date,b=new Date(a.getFullYear()+3,a.getMonth()+Math.floor(12*Math.random()));return`${(b.getMonth()+1).toString().padStart(2,"0")}/${b.getFullYear().toString().substr(2)}`}async clearAllMockData(){this.lightningPayments=[],this.crossBorderTransfers=[],this.virtualCards=[],this.usdtOperations=[]}async generateTestData(){await this.createLightningInvoice(5e4,"Test Invoice 1"),await this.createLightningInvoice(25e3,"Test Invoice 2"),await this.initiateCrossBorderTransfer(100,"NGN","Nigeria"),await this.initiateCrossBorderTransfer(50,"KES","Kenya"),await this.createVirtualCard("visa"),await this.createVirtualCard("mastercard"),await this.buyUSDT(100),await this.sellUSDT(50)}}class e{constructor(a){this.config=a,this.baseURL=a.baseURL||("production"===a.environment?"https://api.bitnob.com/api/v1":"https://sandboxapi.bitnob.com/api/v1"),this.mockServices=d.getInstance()}generateSignature(a,b,d,e,f=""){let g=c(55511),h=`${a}${b}${d}${e}${f}`;return g.createHmac("sha256",this.config.secretKey).update(h).digest("hex")}async makeRequest(a,b="GET",d){try{let e=c(55511),f=Date.now().toString(),g=e.randomBytes(16).toString("hex"),h=d?JSON.stringify(d):"",i=this.generateSignature(b,a,f,g,h),j=new AbortController,k=setTimeout(()=>j.abort(),1e4),l=await fetch(`${this.baseURL}${a}`,{method:b,headers:{"Content-Type":"application/json",Accept:"application/json","x-auth-timestamp":f,"x-auth-nonce":g,"x-auth-signature":i},body:d?JSON.stringify(d):void 0,signal:j.signal});if(clearTimeout(k),!l.ok){let a=await l.json().catch(()=>({}));throw Error(`Bitnob API Error: ${l.status} - ${a.message||l.statusText}`)}return await l.json()}catch(a){if(console.error("Bitnob Service Error:",a),a instanceof Error){if(a.message.includes("getaddrinfo ENOTFOUND")||a.message.includes("fetch failed"))throw Error("Bitnob service is currently unavailable. Please try again later.");if("AbortError"===a.name)throw Error("Bitnob service request timed out. Please try again.")}throw a}}async isServiceAvailable(){try{if(!this.config.secretKey)return console.warn("Bitnob credentials not configured"),!1;let a=await this.makeRequest("/wallets");return a&&(200===a.statusCode||"success"===a.status)}catch(a){if(console.error("Bitnob service availability check failed:",a),a instanceof Error&&(a.message.includes("401")||a.message.includes("403")))return console.warn("Bitnob credentials may be invalid, but service is available"),!0;return!1}}async getAvailableFeatures(){return{wallets:!0,transactions:!0,lightning:!1,crossBorder:!1,virtualCards:!1,stablecoins:!1,message:"Bitnob sandbox currently supports wallet management and transaction history only. Lightning and other advanced features may be available in production."}}async testEndpoints(){let a={};for(let b of["/health","/ping","/wallets","/lightning/invoice","/lightning/send","/bitcoin/send","/rates"])try{let d=c(55511),e=Date.now().toString(),f=d.randomBytes(16).toString("hex"),g=this.generateSignature("GET",b,e,f),h=await fetch(`${this.baseURL}${b}`,{method:"GET",headers:{"x-auth-timestamp":e,"x-auth-nonce":f,"x-auth-signature":g,"Content-Type":"application/json"}});a[b]=404!==h.status}catch(c){a[b]=!1}return a}async createWallet(a){try{return(await this.makeRequest("/wallets","POST",{phoneNumber:a.phoneNumber,email:a.email,firstName:a.firstName,lastName:a.lastName,dateOfBirth:a.dateOfBirth,address:a.address})).data}catch(a){throw console.error("Bitnob wallet creation error:",a),Error(`Wallet creation failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getWalletDetails(a){try{return(await this.makeRequest(`/wallets/${a}`)).data}catch(a){throw Error(`Failed to get wallet details: ${a instanceof Error?a.message:"Unknown error"}`)}}async getWalletBalance(a){try{return(await this.makeRequest(`/wallets/${a}/balance`)).data}catch(a){throw Error(`Balance inquiry failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async sendLightningPayment(a){try{if("sandbox"===this.config.environment){console.log("\uD83C\uDF29️ Using mock Lightning service in sandbox mode");let b=await this.mockServices.sendLightningPayment(`lnbc${a.amount}`,a.amount);return{success:!0,data:b,message:"Lightning payment initiated (mock service)"}}return(await this.makeRequest("/lightning/send","POST",a)).data}catch(a){throw console.error("Lightning payment error:",a),a}}async createLightningInvoice(a){try{if("sandbox"===this.config.environment){console.log("⚡ Using mock Lightning invoice service in sandbox mode");let b=await this.mockServices.createLightningInvoice(a.amount,a.memo||"SACCO Platform Payment");return{success:!0,data:b,message:"Lightning invoice created (mock service)"}}return(await this.makeRequest("/lightning/invoice","POST",{amount:a.amount,currency:a.currency,reference:a.reference,memo:a.memo||"SACCO Platform Payment",expiresIn:a.expiresIn||3600})).data}catch(a){throw Error(`Invoice creation failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async payLightningInvoice(a,b){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDCB0 Using mock Lightning payment service in sandbox mode");let b=await this.mockServices.sendLightningPayment(a,0);return{success:!0,data:b,message:"Lightning invoice paid (mock service)"}}return(await this.makeRequest("/lightning/pay","POST",{invoice:a,walletId:b})).data}catch(a){throw Error(`Invoice payment failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async sendBitcoin(a){try{return(await this.makeRequest("/bitcoin/send","POST",{amount:a.amount,address:a.address,reference:a.reference,narration:a.narration||"SACCO Platform Payment"})).data}catch(a){throw Error(`Bitcoin transaction failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async generateBitcoinAddress(a){try{return(await this.makeRequest(`/bitcoin/address/${a}`,"POST")).data}catch(a){throw Error(`Address generation failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async submitKYC(a){try{let b=new FormData;Object.entries(a).forEach(([a,c])=>{c instanceof File?b.append(a,c):c&&b.append(a,c.toString())});let d=c(55511),e=Date.now().toString(),f=d.randomBytes(16).toString("hex"),g=this.generateSignature("POST","/kyc/submit",e,f),h=await fetch(`${this.baseURL}/kyc/submit`,{method:"POST",headers:{"x-auth-timestamp":e,"x-auth-nonce":f,"x-auth-signature":g},body:b});if(!h.ok){let a=await h.json().catch(()=>({}));throw Error(`KYC submission failed: ${a.message||h.statusText}`)}return(await h.json()).data}catch(a){throw Error(`KYC submission failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getKYCStatus(a){try{return(await this.makeRequest(`/kyc/status/${a}`)).data}catch(a){throw Error(`KYC status check failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async convertBTCToFiat(a){try{return(await this.makeRequest("/convert","POST",{amount:a.amount,fromCurrency:a.fromCurrency,toCurrency:a.toCurrency,reference:a.reference})).data}catch(a){throw Error(`Conversion failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getExchangeRates(a="BTC"){try{return(await this.makeRequest(`/rates?base=${a}`)).data}catch(a){throw Error(`Failed to get exchange rates: ${a instanceof Error?a.message:"Unknown error"}`)}}async getTransactionHistory(a,b=50,c=0){try{return(await this.makeRequest(`/transactions?walletId=${a}&limit=${b}&offset=${c}`)).data}catch(a){throw Error(`Failed to get transaction history: ${a instanceof Error?a.message:"Unknown error"}`)}}async getTransactionDetails(a){try{return(await this.makeRequest(`/transactions/${a}`)).data}catch(a){throw Error(`Failed to get transaction details: ${a instanceof Error?a.message:"Unknown error"}`)}}verifyWebhookSignature(a,b,d){try{let e=c(55511),f=e.createHmac("sha256",d).update(a).digest("hex");return e.timingSafeEqual(Buffer.from(b,"hex"),Buffer.from(f,"hex"))}catch(a){return console.error("Webhook signature verification failed:",a),!1}}async sendUSDT(a){try{return(await this.makeRequest("/stablecoins/usdt/send","POST",{amount:a.amount,currency:a.currency,targetNetwork:a.targetNetwork,recipientAddress:a.recipientAddress,reference:a.reference})).data}catch(a){throw Error(`USDT transfer failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async convertToUSDT(a){try{return(await this.makeRequest("/stablecoins/convert","POST",{amount:a.amount,fromCurrency:a.fromCurrency,toCurrency:"USDT",reference:a.reference})).data}catch(a){throw Error(`USDT conversion failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getCrossBorderRates(a,b,c){try{return(await this.makeRequest(`/cross-border/rates?source=${a}&target=${b}&country=${c}`)).data}catch(a){throw Error(`Failed to get cross-border rates: ${a instanceof Error?a.message:"Unknown error"}`)}}async updateCardLimit(a,b){try{return(await this.makeRequest(`/virtual-cards/${a}/limit`,"PUT",{spendingLimit:b})).data}catch(a){throw Error(`Failed to update card limit: ${a instanceof Error?a.message:"Unknown error"}`)}}async sendCrossBorderPayment(a){try{if("sandbox"===this.config.environment){console.log("\uD83C\uDF0D Using mock cross-border service in sandbox mode");let b=await this.mockServices.initiateCrossBorderTransfer(a.amount,a.targetCurrency,a.recipientCountry);return{success:!0,data:b,message:"Cross-border payment initiated (mock service)"}}return(await this.makeRequest("/cross-border/send","POST",a)).data}catch(a){throw Error(`Cross-border payment failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getCrossBorderTransfers(){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDCCB Using mock cross-border history in sandbox mode");let a=await this.mockServices.getCrossBorderTransfers();return{success:!0,data:a,message:"Cross-border transfers retrieved (mock service)"}}return(await this.makeRequest("/cross-border/transfers")).data}catch(a){throw Error(`Failed to get cross-border transfers: ${a instanceof Error?a.message:"Unknown error"}`)}}async createVirtualCard(a){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDCB3 Using mock virtual card service in sandbox mode");let a=await this.mockServices.createVirtualCard("visa");return{success:!0,data:a,message:"Virtual card created (mock service)"}}return(await this.makeRequest("/virtual-cards","POST",a)).data}catch(a){throw Error(`Virtual card creation failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getVirtualCards(a){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDDC2️ Using mock virtual card list in sandbox mode");let a=await this.mockServices.getVirtualCards();return{success:!0,data:a,message:"Virtual cards retrieved (mock service)"}}let b=a?`/virtual-cards/user/${a}`:"/virtual-cards";return(await this.makeRequest(b)).data}catch(a){throw Error(`Failed to get virtual cards: ${a instanceof Error?a.message:"Unknown error"}`)}}async fundVirtualCard(a,b){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDCB0 Using mock card funding in sandbox mode");let c=await this.mockServices.fundVirtualCard(a,b);return{success:c,message:`Virtual card ${c?"funded":"funding failed"} (mock service)`}}return(await this.makeRequest(`/virtual-cards/${a}/fund`,"POST",{amount:b})).data}catch(a){throw Error(`Failed to fund card: ${a instanceof Error?a.message:"Unknown error"}`)}}async freezeCard(a){try{if("sandbox"===this.config.environment){console.log("\uD83E\uDDCA Using mock card freeze in sandbox mode");let b=await this.mockServices.freezeVirtualCard(a);return{success:b,message:`Virtual card ${b?"frozen":"freeze failed"} (mock service)`}}return(await this.makeRequest(`/virtual-cards/${a}/freeze`,"POST")).data}catch(a){throw Error(`Failed to freeze card: ${a instanceof Error?a.message:"Unknown error"}`)}}async unfreezeCard(a){try{return"sandbox"===this.config.environment&&console.log("\uD83D\uDD25 Mock card unfreeze not implemented - using production endpoint"),(await this.makeRequest(`/virtual-cards/${a}/unfreeze`,"POST")).data}catch(a){throw Error(`Failed to unfreeze card: ${a instanceof Error?a.message:"Unknown error"}`)}}async buyStablecoin(a){try{if("sandbox"===this.config.environment){console.log("\uD83E\uDE99 Using mock USDT buy service in sandbox mode");let b=await this.mockServices.buyUSDT(a.amount);return{success:!0,data:b,message:"USDT purchased (mock service)"}}return(await this.makeRequest("/stablecoins/buy","POST",a)).data}catch(a){throw Error(`Stablecoin purchase failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async sellStablecoin(a){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDCB1 Using mock USDT sell service in sandbox mode");let b=await this.mockServices.sellUSDT(a.amount);return{success:!0,data:b,message:"USDT sold (mock service)"}}return(await this.makeRequest("/stablecoins/sell","POST",a)).data}catch(a){throw Error(`Stablecoin sale failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async transferStablecoin(a){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDD04 Using mock USDT transfer service in sandbox mode");let b=await this.mockServices.transferUSDT(a.amount,a.recipientAddress||"mock-recipient");return{success:!0,data:b,message:"USDT transferred (mock service)"}}return(await this.makeRequest("/stablecoins/transfer","POST",a)).data}catch(a){throw Error(`Stablecoin transfer failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async getStablecoinOperations(){try{if("sandbox"===this.config.environment){console.log("\uD83D\uDCCA Using mock USDT operations in sandbox mode");let a=await this.mockServices.getUSDTOperations();return{success:!0,data:a,message:"USDT operations retrieved (mock service)"}}return(await this.makeRequest("/stablecoins/operations")).data}catch(a){throw Error(`Failed to get stablecoin operations: ${a instanceof Error?a.message:"Unknown error"}`)}}async healthCheck(){try{return await this.makeRequest("/health")}catch(a){throw Error(`Health check failed: ${a instanceof Error?a.message:"Unknown error"}`)}}}let f=null;function g(){if(f)return f;let a=process.env.BITNOB_SECRET_KEY||"",b=process.env.NEXT_PUBLIC_BITNOB_BASE_URL||process.env.BITNOB_BASE_URL||"https://sandboxapi.bitnob.com/api/v1",c={secretKey:a,environment:b.includes("sandbox")?"sandbox":"production",baseURL:b};return a||console.warn("Bitnob credentials not configured. Bitcoin wallet features will be disabled."),f=new e(c)}let h=g()},96487:()=>{}};