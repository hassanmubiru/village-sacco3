"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/services/bitnob.service.ts":
/*!****************************************!*\
  !*** ./src/services/bitnob.service.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitnobService: () => (/* binding */ BitnobService),\n/* harmony export */   bitnobService: () => (/* binding */ bitnobService),\n/* harmony export */   createBitnobService: () => (/* binding */ createBitnobService)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/**\n * Bitnob Service - Blockchain integration for SACCO platform\n * Handles Bitcoin Lightning Network payments, wallet operations, and KYC\n */ class BitnobService {\n    async makeRequest(endpoint) {\n        let method = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'GET', data = arguments.length > 2 ? arguments[2] : void 0;\n        try {\n            // Create timeout controller\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 10000); // 10 second timeout\n            const response = await fetch(\"\".concat(this.baseURL).concat(endpoint), {\n                method,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(this.config.apiKey),\n                    'Accept': 'application/json'\n                },\n                body: data ? JSON.stringify(data) : undefined,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(\"Bitnob API Error: \".concat(response.status, \" - \").concat(errorData.message || response.statusText));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Bitnob Service Error:', error);\n            // Handle specific network errors\n            if (error instanceof Error) {\n                if (error.message.includes('getaddrinfo ENOTFOUND') || error.message.includes('fetch failed')) {\n                    throw new Error('Bitnob service is currently unavailable. Please try again later.');\n                }\n                if (error.name === 'AbortError') {\n                    throw new Error('Bitnob service request timed out. Please try again.');\n                }\n            }\n            throw error;\n        }\n    }\n    // Check if Bitnob service is available\n    async isServiceAvailable() {\n        try {\n            // Check if API key is configured\n            if (!this.config.apiKey) {\n                console.warn('Bitnob API key not configured');\n                return false;\n            }\n            // Test with health endpoint\n            const response = await this.makeRequest('/health');\n            return response && response.status === 'ok';\n        } catch (error) {\n            console.error('Bitnob service availability check failed:', error);\n            return false;\n        }\n    }\n    // Test available endpoints\n    async testEndpoints() {\n        const endpoints = [\n            '/health',\n            '/ping',\n            '/wallets',\n            '/lightning/invoice',\n            '/lightning/send',\n            '/bitcoin/send',\n            '/rates'\n        ];\n        const results = {};\n        for (const endpoint of endpoints){\n            try {\n                const response = await fetch(\"\".concat(this.baseURL).concat(endpoint), {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': \"Bearer \".concat(this.config.apiKey),\n                        'Content-Type': 'application/json'\n                    }\n                });\n                results[endpoint] = response.status !== 404;\n            } catch (error) {\n                results[endpoint] = false;\n            }\n        }\n        return results;\n    }\n    // Authentication and User Management\n    async createWallet(userData) {\n        try {\n            // First check if service is available\n            const isAvailable = await this.isServiceAvailable();\n            if (!isAvailable) {\n                throw new Error('Bitnob service is currently unavailable');\n            }\n            const response = await this.makeRequest('/wallets/create', 'POST', {\n                phoneNumber: userData.phoneNumber,\n                email: userData.email,\n                firstName: userData.firstName,\n                lastName: userData.lastName,\n                dateOfBirth: userData.dateOfBirth,\n                address: userData.address\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Bitnob wallet creation error:', error);\n            throw new Error(\"Wallet creation failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async getWalletDetails(walletId) {\n        try {\n            const response = await this.makeRequest(\"/wallets/\".concat(walletId));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get wallet details: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async getWalletBalance(walletId) {\n        try {\n            const response = await this.makeRequest(\"/wallets/\".concat(walletId, \"/balance\"));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Balance inquiry failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // Lightning Network Operations\n    async sendLightningPayment(paymentData) {\n        try {\n            // Check if service is available first\n            const isAvailable = await this.isServiceAvailable();\n            if (!isAvailable) {\n                throw new Error('Bitnob service is currently unavailable. Please try again later.');\n            }\n            const response = await this.makeRequest('/lightning/send', 'POST', {\n                amount: paymentData.amount,\n                reference: paymentData.reference,\n                narration: paymentData.narration || 'SACCO Platform Payment'\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Lightning payment error:', error);\n            if (error instanceof Error && error.message.includes('404')) {\n                throw new Error('Lightning payment service is temporarily unavailable. The API endpoint may have changed. Please contact support.');\n            }\n            throw new Error(\"Lightning payment failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async createLightningInvoice(invoiceData) {\n        try {\n            const response = await this.makeRequest('/lightning/invoice', 'POST', {\n                amount: invoiceData.amount,\n                currency: invoiceData.currency,\n                reference: invoiceData.reference,\n                memo: invoiceData.memo || 'SACCO Platform Payment',\n                expiresIn: invoiceData.expiresIn || 3600\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Invoice creation failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async payLightningInvoice(invoice, walletId) {\n        try {\n            const response = await this.makeRequest('/lightning/pay', 'POST', {\n                invoice,\n                walletId\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Invoice payment failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // Bitcoin On-Chain Operations\n    async sendBitcoin(paymentData) {\n        try {\n            const response = await this.makeRequest('/bitcoin/send', 'POST', {\n                amount: paymentData.amount,\n                address: paymentData.address,\n                reference: paymentData.reference,\n                narration: paymentData.narration || 'SACCO Platform Payment'\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Bitcoin transaction failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async generateBitcoinAddress(walletId) {\n        try {\n            const response = await this.makeRequest(\"/bitcoin/address/\".concat(walletId), 'POST');\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Address generation failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // KYC Operations\n    async submitKYC(kycData) {\n        try {\n            // Note: File uploads would need FormData instead of JSON\n            const formData = new FormData();\n            Object.entries(kycData).forEach((param)=>{\n                let [key, value] = param;\n                if (value instanceof File) {\n                    formData.append(key, value);\n                } else if (value) {\n                    formData.append(key, value.toString());\n                }\n            });\n            const response = await fetch(\"\".concat(this.baseURL, \"/kyc/submit\"), {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(this.config.apiKey)\n                },\n                body: formData\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(\"KYC submission failed: \".concat(errorData.message || response.statusText));\n            }\n            const result = await response.json();\n            return result.data;\n        } catch (error) {\n            throw new Error(\"KYC submission failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async getKYCStatus(userId) {\n        try {\n            const response = await this.makeRequest(\"/kyc/status/\".concat(userId));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"KYC status check failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // Currency Conversion\n    async convertBTCToFiat(conversionData) {\n        try {\n            const response = await this.makeRequest('/convert', 'POST', {\n                amount: conversionData.amount,\n                fromCurrency: conversionData.fromCurrency,\n                toCurrency: conversionData.toCurrency,\n                reference: conversionData.reference\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Conversion failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async getExchangeRates() {\n        let baseCurrency = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'BTC';\n        try {\n            const response = await this.makeRequest(\"/rates?base=\".concat(baseCurrency));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get exchange rates: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // Transaction History\n    async getTransactionHistory(walletId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        try {\n            const response = await this.makeRequest(\"/transactions?walletId=\".concat(walletId, \"&limit=\").concat(limit, \"&offset=\").concat(offset));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get transaction history: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async getTransactionDetails(transactionId) {\n        try {\n            const response = await this.makeRequest(\"/transactions/\".concat(transactionId));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get transaction details: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // Webhook verification (for backend use)\n    verifyWebhookSignature(payload, signature, secret) {\n        // Implementation would depend on Bitnob's webhook signature method\n        // This is a placeholder for the actual verification logic\n        try {\n            const crypto = __webpack_require__(/*! crypto */ \"(app-pages-browser)/./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n            const expectedSignature = crypto.createHmac('sha256', secret).update(payload).digest('hex');\n            return crypto.timingSafeEqual(Buffer.from(signature, 'hex'), Buffer.from(expectedSignature, 'hex'));\n        } catch (error) {\n            console.error('Webhook signature verification failed:', error);\n            return false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const response = await this.makeRequest('/health');\n            return response;\n        } catch (error) {\n            throw new Error(\"Health check failed: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    constructor(config){\n        this.config = config;\n        this.baseURL = config.baseURL || (config.environment === 'production' ? 'https://api.bitnob.com' : 'https://sandboxapi.bitnob.com');\n    }\n}\n// Singleton instance for frontend use\nlet bitnobServiceInstance = null;\nfunction createBitnobService(config) {\n    if (!bitnobServiceInstance || config) {\n        // Use new environment variable names\n        const clientId = process.env.BITNOB_CLIENT_ID || '';\n        const secretKey = process.env.BITNOB_SECRET_KEY || '';\n        const baseURL = process.env.BITNOB_BASE_URL || '';\n        // Use secret key as the API key for authentication\n        const apiKey = secretKey;\n        const serviceConfig = config || {\n            apiKey,\n            environment: baseURL.includes('sandbox') ? 'sandbox' : 'production',\n            baseURL: baseURL.replace('/api/v1', '')\n        };\n        // Warn if API key is missing\n        if (!apiKey) {\n            console.warn('Bitnob API key not configured. Bitcoin wallet features will be disabled.');\n        }\n        bitnobServiceInstance = new BitnobService(serviceConfig);\n    }\n    return bitnobServiceInstance;\n}\n// Default export for convenience\nconst bitnobService = createBitnobService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/bitnob.service.ts\n"));

/***/ })

});