"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/services/bitnob.service.ts":
/*!****************************************!*\
  !*** ./src/services/bitnob.service.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitnobService: function() { return /* binding */ BitnobService; },\n/* harmony export */   bitnobService: function() { return /* binding */ bitnobService; },\n/* harmony export */   createBitnobService: function() { return /* binding */ createBitnobService; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/**\n * Bitnob Service - Blockchain integration for SACCO platform\n * Handles Bitcoin Lightning Network payments, wallet operations, and KYC\n */ class BitnobService {\n    async makeRequest(endpoint) {\n        let method = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"GET\", data = arguments.length > 2 ? arguments[2] : void 0;\n        try {\n            const response = await fetch(\"\".concat(this.baseURL).concat(endpoint), {\n                method,\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": \"Bearer \".concat(this.config.apiKey),\n                    \"Accept\": \"application/json\"\n                },\n                body: data ? JSON.stringify(data) : undefined,\n                // Add timeout and retry logic\n                signal: AbortSignal.timeout(10000)\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(\"Bitnob API Error: \".concat(response.status, \" - \").concat(errorData.message || response.statusText));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Bitnob Service Error:\", error);\n            // Handle specific network errors\n            if (error instanceof Error) {\n                if (error.message.includes(\"getaddrinfo ENOTFOUND\") || error.message.includes(\"fetch failed\")) {\n                    throw new Error(\"Bitnob service is currently unavailable. Please try again later.\");\n                }\n                if (error.name === \"TimeoutError\") {\n                    throw new Error(\"Bitnob service request timed out. Please try again.\");\n                }\n            }\n            throw error;\n        }\n    }\n    // Check if Bitnob service is available\n    async isServiceAvailable() {\n        try {\n            // Try a simple ping/health check\n            await this.makeRequest(\"/api/v1/ping\");\n            return true;\n        } catch (error) {\n            console.warn(\"Bitnob service unavailable:\", error);\n            return false;\n        }\n    }\n    // Authentication and User Management\n    async createWallet(userData) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/wallets/create\", \"POST\", {\n                phoneNumber: userData.phoneNumber,\n                email: userData.email,\n                firstName: userData.firstName,\n                lastName: userData.lastName,\n                dateOfBirth: userData.dateOfBirth,\n                address: userData.address\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Wallet creation failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async getWalletDetails(walletId) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/wallets/\".concat(walletId));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get wallet details: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async getWalletBalance(walletId) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/wallets/\".concat(walletId, \"/balance\"));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Balance inquiry failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    // Lightning Network Operations\n    async sendLightningPayment(paymentData) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/lightning/send\", \"POST\", {\n                amount: paymentData.amount,\n                currency: paymentData.currency,\n                recipientId: paymentData.recipientId,\n                phoneNumber: paymentData.phoneNumber,\n                email: paymentData.email,\n                reference: paymentData.reference,\n                narration: paymentData.narration || \"SACCO Platform Payment\"\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Lightning payment failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async createLightningInvoice(invoiceData) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/lightning/invoice\", \"POST\", {\n                amount: invoiceData.amount,\n                currency: invoiceData.currency,\n                reference: invoiceData.reference,\n                memo: invoiceData.memo || \"SACCO Platform Payment\",\n                expiresIn: invoiceData.expiresIn || 3600\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Invoice creation failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async payLightningInvoice(invoice, walletId) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/lightning/pay\", \"POST\", {\n                invoice,\n                walletId\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Invoice payment failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    // Bitcoin On-Chain Operations\n    async sendBitcoin(paymentData) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/bitcoin/send\", \"POST\", {\n                amount: paymentData.amount,\n                address: paymentData.address,\n                reference: paymentData.reference,\n                narration: paymentData.narration || \"SACCO Platform Payment\"\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Bitcoin transaction failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async generateBitcoinAddress(walletId) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/bitcoin/address/\".concat(walletId), \"POST\");\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Address generation failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    // KYC Operations\n    async submitKYC(kycData) {\n        try {\n            // Note: File uploads would need FormData instead of JSON\n            const formData = new FormData();\n            Object.entries(kycData).forEach((param)=>{\n                let [key, value] = param;\n                if (value instanceof File) {\n                    formData.append(key, value);\n                } else if (value) {\n                    formData.append(key, value.toString());\n                }\n            });\n            const response = await fetch(\"\".concat(this.baseURL, \"/api/v1/kyc/submit\"), {\n                method: \"POST\",\n                headers: {\n                    \"Authorization\": \"Bearer \".concat(this.config.apiKey)\n                },\n                body: formData\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(\"KYC submission failed: \".concat(errorData.message || response.statusText));\n            }\n            const result = await response.json();\n            return result.data;\n        } catch (error) {\n            throw new Error(\"KYC submission failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async getKYCStatus(userId) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/kyc/status/\".concat(userId));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"KYC status check failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    // Currency Conversion\n    async convertBTCToFiat(conversionData) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/convert\", \"POST\", {\n                amount: conversionData.amount,\n                fromCurrency: conversionData.fromCurrency,\n                toCurrency: conversionData.toCurrency,\n                reference: conversionData.reference\n            });\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Conversion failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async getExchangeRates() {\n        let baseCurrency = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"BTC\";\n        try {\n            const response = await this.makeRequest(\"/api/v1/rates?base=\".concat(baseCurrency));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get exchange rates: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    // Transaction History\n    async getTransactionHistory(walletId) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        try {\n            const response = await this.makeRequest(\"/api/v1/transactions?walletId=\".concat(walletId, \"&limit=\").concat(limit, \"&offset=\").concat(offset));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get transaction history: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    async getTransactionDetails(transactionId) {\n        try {\n            const response = await this.makeRequest(\"/api/v1/transactions/\".concat(transactionId));\n            return response.data;\n        } catch (error) {\n            throw new Error(\"Failed to get transaction details: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    // Webhook verification (for backend use)\n    verifyWebhookSignature(payload, signature, secret) {\n        // Implementation would depend on Bitnob's webhook signature method\n        // This is a placeholder for the actual verification logic\n        try {\n            const crypto = __webpack_require__(/*! crypto */ \"(app-pages-browser)/./node_modules/next/dist/compiled/crypto-browserify/index.js\");\n            const expectedSignature = crypto.createHmac(\"sha256\", secret).update(payload).digest(\"hex\");\n            return crypto.timingSafeEqual(Buffer.from(signature, \"hex\"), Buffer.from(expectedSignature, \"hex\"));\n        } catch (error) {\n            console.error(\"Webhook signature verification failed:\", error);\n            return false;\n        }\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            const response = await this.makeRequest(\"/api/v1/health\");\n            return response;\n        } catch (error) {\n            throw new Error(\"Health check failed: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }\n    constructor(config){\n        this.config = config;\n        this.baseURL = config.baseURL || (config.environment === \"production\" ? \"https://api.bitnob.com\" : \"https://sandboxapi.bitnob.com\");\n    }\n}\n// Singleton instance for frontend use\nlet bitnobServiceInstance = null;\nfunction createBitnobService(config) {\n    if (!bitnobServiceInstance || config) {\n        const serviceConfig = config || {\n            apiKey: \"pk.e9dc8b598acf.8a2975318e1e4f001fbb964f6\" || 0,\n            environment: \"sandbox\" || 0,\n            baseURL: \"https://sandboxapi.bitnob.com\"\n        };\n        bitnobServiceInstance = new BitnobService(serviceConfig);\n    }\n    return bitnobServiceInstance;\n}\n// Default export for convenience\nconst bitnobService = createBitnobService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9iaXRub2Iuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7OztDQUdDLEdBdURNLE1BQU1BO0lBWVgsTUFBY0MsWUFBWUMsUUFBZ0IsRUFBc0M7WUFBcENDLFNBQUFBLGlFQUFpQixPQUFPQztRQUNsRSxJQUFJO1lBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLEdBQWtCSixPQUFmLElBQUksQ0FBQ0ssT0FBTyxFQUFZLE9BQVRMLFdBQVk7Z0JBQ3pEQztnQkFDQUssU0FBUztvQkFDUCxnQkFBZ0I7b0JBQ2hCLGlCQUFpQixVQUE2QixPQUFuQixJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTTtvQkFDN0MsVUFBVTtnQkFDWjtnQkFDQUMsTUFBTVAsT0FBT1EsS0FBS0MsU0FBUyxDQUFDVCxRQUFRVTtnQkFDcEMsOEJBQThCO2dCQUM5QkMsUUFBUUMsWUFBWUMsT0FBTyxDQUFDO1lBQzlCO1lBRUEsSUFBSSxDQUFDWixTQUFTYSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU1DLFlBQVksTUFBTWQsU0FBU2UsSUFBSSxHQUFHQyxLQUFLLENBQUMsSUFBTyxFQUFDO2dCQUN0RCxNQUFNLElBQUlDLE1BQU0scUJBQTBDSCxPQUFyQmQsU0FBU2tCLE1BQU0sRUFBQyxPQUE4QyxPQUF6Q0osVUFBVUssT0FBTyxJQUFJbkIsU0FBU29CLFVBQVU7WUFDcEc7WUFFQSxPQUFPLE1BQU1wQixTQUFTZSxJQUFJO1FBQzVCLEVBQUUsT0FBT00sT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMseUJBQXlCQTtZQUV2QyxpQ0FBaUM7WUFDakMsSUFBSUEsaUJBQWlCSixPQUFPO2dCQUMxQixJQUFJSSxNQUFNRixPQUFPLENBQUNJLFFBQVEsQ0FBQyw0QkFBNEJGLE1BQU1GLE9BQU8sQ0FBQ0ksUUFBUSxDQUFDLGlCQUFpQjtvQkFDN0YsTUFBTSxJQUFJTixNQUFNO2dCQUNsQjtnQkFDQSxJQUFJSSxNQUFNRyxJQUFJ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TSxHQUFHQTtRQUNkLElBQUksQ0FBQ0YsT0FBTyxHQUFHRSxPQUFPRixPQUFPLElBQzFCRSxDQUFBQSxPQUFPMEYsV0FBVyxLQUFLLGVBQ3BCLDJCQUNBLCtCQUE4QjtJQUN0QztBQWdSRjtBQUVBLHNDQUFzQztBQUN0QyxJQUFJQyx3QkFBOEM7QUFFM0MsU0FBU0Msb0JBQW9CNUYsTUFBcUI7SUFDdkQsSUFBSSxDQUFDMkYseUJBQXlCM0YsUUFBUTtRQUNwQyxNQUFNNkYsZ0JBQWdCN0YsVUFBVTtZQUM5QkMsUUFBUTZGLDJDQUFzQyxJQUFJO1lBQ2xESixhQUFhLFNBQTJDLElBQWlDO1lBQ3pGNUYsU0FBU2dHLCtCQUF1QztRQUNsRDtRQUVBSCx3QkFBd0IsSUFBSXBHLGNBQWNzRztJQUM1QztJQUVBLE9BQU9GO0FBQ1Q7QUFFQSxpQ0FBaUM7QUFDMUIsTUFBTVEsZ0JBQWdCUCxzQkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3NlcnZpY2VzL2JpdG5vYi5zZXJ2aWNlLnRzP2QyOTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCaXRub2IgU2VydmljZSAtIEJsb2NrY2hhaW4gaW50ZWdyYXRpb24gZm9yIFNBQ0NPIHBsYXRmb3JtXG4gKiBIYW5kbGVzIEJpdGNvaW4gTGlnaHRuaW5nIE5ldHdvcmsgcGF5bWVudHMsIHdhbGxldCBvcGVyYXRpb25zLCBhbmQgS1lDXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBCaXRub2JDb25maWcge1xuICBhcGlLZXk6IHN0cmluZztcbiAgZW52aXJvbm1lbnQ6ICdzYW5kYm94JyB8ICdwcm9kdWN0aW9uJztcbiAgYmFzZVVSTD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXYWxsZXREYXRhIHtcbiAgcGhvbmVOdW1iZXI6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIGRhdGVPZkJpcnRoPzogc3RyaW5nO1xuICBhZGRyZXNzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnREYXRhIHtcbiAgYW1vdW50OiBudW1iZXI7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIHJlY2lwaWVudElkPzogc3RyaW5nO1xuICBwaG9uZU51bWJlcj86IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG4gIHJlZmVyZW5jZTogc3RyaW5nO1xuICBuYXJyYXRpb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlnaHRuaW5nSW52b2ljZURhdGEge1xuICBhbW91bnQ6IG51bWJlcjtcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgcmVmZXJlbmNlOiBzdHJpbmc7XG4gIG1lbW8/OiBzdHJpbmc7XG4gIGV4cGlyZXNJbj86IG51bWJlcjsgLy8gc2Vjb25kc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEtZQ0RhdGEge1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcbiAgZGF0ZU9mQmlydGg6IHN0cmluZztcbiAgcGhvbmVOdW1iZXI6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgYWRkcmVzczogc3RyaW5nO1xuICBpZFR5cGU6ICduaW4nIHwgJ3Bhc3Nwb3J0JyB8ICdkcml2ZXJzX2xpY2Vuc2UnO1xuICBpZE51bWJlcjogc3RyaW5nO1xuICBpZERvY3VtZW50PzogRmlsZTtcbiAgcHJvb2ZPZkFkZHJlc3M/OiBGaWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNpb25EYXRhIHtcbiAgYW1vdW50OiBudW1iZXI7XG4gIGZyb21DdXJyZW5jeTogc3RyaW5nO1xuICB0b0N1cnJlbmN5OiBzdHJpbmc7XG4gIHJlZmVyZW5jZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQml0bm9iU2VydmljZSB7XG4gIHByaXZhdGUgY29uZmlnOiBCaXRub2JDb25maWc7XG4gIHByaXZhdGUgYmFzZVVSTDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogQml0bm9iQ29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5iYXNlVVJMID0gY29uZmlnLmJhc2VVUkwgfHwgXG4gICAgICAoY29uZmlnLmVudmlyb25tZW50ID09PSAncHJvZHVjdGlvbicgXG4gICAgICAgID8gJ2h0dHBzOi8vYXBpLmJpdG5vYi5jb20nIFxuICAgICAgICA6ICdodHRwczovL3NhbmRib3hhcGkuYml0bm9iLmNvbScpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdChlbmRwb2ludDogc3RyaW5nLCBtZXRob2Q6IHN0cmluZyA9ICdHRVQnLCBkYXRhPzogYW55KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVVJMfSR7ZW5kcG9pbnR9YCwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY29uZmlnLmFwaUtleX1gLFxuICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IGRhdGEgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gQWRkIHRpbWVvdXQgYW5kIHJldHJ5IGxvZ2ljXG4gICAgICAgIHNpZ25hbDogQWJvcnRTaWduYWwudGltZW91dCgxMDAwMCksIC8vIDEwIHNlY29uZCB0aW1lb3V0XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQml0bm9iIEFQSSBFcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9IC0gJHtlcnJvckRhdGEubWVzc2FnZSB8fCByZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdCaXRub2IgU2VydmljZSBFcnJvcjonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIC8vIEhhbmRsZSBzcGVjaWZpYyBuZXR3b3JrIGVycm9yc1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ2dldGFkZHJpbmZvIEVOT1RGT1VORCcpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ2ZldGNoIGZhaWxlZCcpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCaXRub2Igc2VydmljZSBpcyBjdXJyZW50bHkgdW5hdmFpbGFibGUuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdUaW1lb3V0RXJyb3InKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCaXRub2Igc2VydmljZSByZXF1ZXN0IHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2Fpbi4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiBCaXRub2Igc2VydmljZSBpcyBhdmFpbGFibGVcbiAgYXN5bmMgaXNTZXJ2aWNlQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBUcnkgYSBzaW1wbGUgcGluZy9oZWFsdGggY2hlY2tcbiAgICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJy9hcGkvdjEvcGluZycpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignQml0bm9iIHNlcnZpY2UgdW5hdmFpbGFibGU6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEF1dGhlbnRpY2F0aW9uIGFuZCBVc2VyIE1hbmFnZW1lbnRcbiAgYXN5bmMgY3JlYXRlV2FsbGV0KHVzZXJEYXRhOiBXYWxsZXREYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS92MS93YWxsZXRzL2NyZWF0ZScsICdQT1NUJywge1xuICAgICAgICBwaG9uZU51bWJlcjogdXNlckRhdGEucGhvbmVOdW1iZXIsXG4gICAgICAgIGVtYWlsOiB1c2VyRGF0YS5lbWFpbCxcbiAgICAgICAgZmlyc3ROYW1lOiB1c2VyRGF0YS5maXJzdE5hbWUsXG4gICAgICAgIGxhc3ROYW1lOiB1c2VyRGF0YS5sYXN0TmFtZSxcbiAgICAgICAgZGF0ZU9mQmlydGg6IHVzZXJEYXRhLmRhdGVPZkJpcnRoLFxuICAgICAgICBhZGRyZXNzOiB1c2VyRGF0YS5hZGRyZXNzLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBXYWxsZXQgY3JlYXRpb24gZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFdhbGxldERldGFpbHMod2FsbGV0SWQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYC9hcGkvdjEvd2FsbGV0cy8ke3dhbGxldElkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCB3YWxsZXQgZGV0YWlsczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRXYWxsZXRCYWxhbmNlKHdhbGxldElkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvYXBpL3YxL3dhbGxldHMvJHt3YWxsZXRJZH0vYmFsYW5jZWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQmFsYW5jZSBpbnF1aXJ5IGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gIH1cblxuICAvLyBMaWdodG5pbmcgTmV0d29yayBPcGVyYXRpb25zXG4gIGFzeW5jIHNlbmRMaWdodG5pbmdQYXltZW50KHBheW1lbnREYXRhOiBQYXltZW50RGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJy9hcGkvdjEvbGlnaHRuaW5nL3NlbmQnLCAnUE9TVCcsIHtcbiAgICAgICAgYW1vdW50OiBwYXltZW50RGF0YS5hbW91bnQsXG4gICAgICAgIGN1cnJlbmN5OiBwYXltZW50RGF0YS5jdXJyZW5jeSxcbiAgICAgICAgcmVjaXBpZW50SWQ6IHBheW1lbnREYXRhLnJlY2lwaWVudElkLFxuICAgICAgICBwaG9uZU51bWJlcjogcGF5bWVudERhdGEucGhvbmVOdW1iZXIsXG4gICAgICAgIGVtYWlsOiBwYXltZW50RGF0YS5lbWFpbCxcbiAgICAgICAgcmVmZXJlbmNlOiBwYXltZW50RGF0YS5yZWZlcmVuY2UsXG4gICAgICAgIG5hcnJhdGlvbjogcGF5bWVudERhdGEubmFycmF0aW9uIHx8ICdTQUNDTyBQbGF0Zm9ybSBQYXltZW50JyxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTGlnaHRuaW5nIHBheW1lbnQgZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUxpZ2h0bmluZ0ludm9pY2UoaW52b2ljZURhdGE6IExpZ2h0bmluZ0ludm9pY2VEYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS92MS9saWdodG5pbmcvaW52b2ljZScsICdQT1NUJywge1xuICAgICAgICBhbW91bnQ6IGludm9pY2VEYXRhLmFtb3VudCxcbiAgICAgICAgY3VycmVuY3k6IGludm9pY2VEYXRhLmN1cnJlbmN5LFxuICAgICAgICByZWZlcmVuY2U6IGludm9pY2VEYXRhLnJlZmVyZW5jZSxcbiAgICAgICAgbWVtbzogaW52b2ljZURhdGEubWVtbyB8fCAnU0FDQ08gUGxhdGZvcm0gUGF5bWVudCcsXG4gICAgICAgIGV4cGlyZXNJbjogaW52b2ljZURhdGEuZXhwaXJlc0luIHx8IDM2MDAsIC8vIDEgaG91ciBkZWZhdWx0XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludm9pY2UgY3JlYXRpb24gZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHBheUxpZ2h0bmluZ0ludm9pY2UoaW52b2ljZTogc3RyaW5nLCB3YWxsZXRJZDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS92MS9saWdodG5pbmcvcGF5JywgJ1BPU1QnLCB7XG4gICAgICAgIGludm9pY2UsXG4gICAgICAgIHdhbGxldElkLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZvaWNlIHBheW1lbnQgZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEJpdGNvaW4gT24tQ2hhaW4gT3BlcmF0aW9uc1xuICBhc3luYyBzZW5kQml0Y29pbihwYXltZW50RGF0YTogUGF5bWVudERhdGEgJiB7IGFkZHJlc3M6IHN0cmluZyB9KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS92MS9iaXRjb2luL3NlbmQnLCAnUE9TVCcsIHtcbiAgICAgICAgYW1vdW50OiBwYXltZW50RGF0YS5hbW91bnQsXG4gICAgICAgIGFkZHJlc3M6IHBheW1lbnREYXRhLmFkZHJlc3MsXG4gICAgICAgIHJlZmVyZW5jZTogcGF5bWVudERhdGEucmVmZXJlbmNlLFxuICAgICAgICBuYXJyYXRpb246IHBheW1lbnREYXRhLm5hcnJhdGlvbiB8fCAnU0FDQ08gUGxhdGZvcm0gUGF5bWVudCcsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEJpdGNvaW4gdHJhbnNhY3Rpb24gZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlQml0Y29pbkFkZHJlc3Mod2FsbGV0SWQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYC9hcGkvdjEvYml0Y29pbi9hZGRyZXNzLyR7d2FsbGV0SWR9YCwgJ1BPU1QnKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFkZHJlc3MgZ2VuZXJhdGlvbiBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgLy8gS1lDIE9wZXJhdGlvbnNcbiAgYXN5bmMgc3VibWl0S1lDKGt5Y0RhdGE6IEtZQ0RhdGEpIHtcbiAgICB0cnkge1xuICAgICAgLy8gTm90ZTogRmlsZSB1cGxvYWRzIHdvdWxkIG5lZWQgRm9ybURhdGEgaW5zdGVhZCBvZiBKU09OXG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgT2JqZWN0LmVudHJpZXMoa3ljRGF0YSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVVJMfS9hcGkvdjEva3ljL3N1Ym1pdGAsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNvbmZpZy5hcGlLZXl9YCxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgS1lDIHN1Ym1pc3Npb24gZmFpbGVkOiAke2Vycm9yRGF0YS5tZXNzYWdlIHx8IHJlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBLWUMgc3VibWlzc2lvbiBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0S1lDU3RhdHVzKHVzZXJJZDogc3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChgL2FwaS92MS9reWMvc3RhdHVzLyR7dXNlcklkfWApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgS1lDIHN0YXR1cyBjaGVjayBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ3VycmVuY3kgQ29udmVyc2lvblxuICBhc3luYyBjb252ZXJ0QlRDVG9GaWF0KGNvbnZlcnNpb25EYXRhOiBDb252ZXJzaW9uRGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJy9hcGkvdjEvY29udmVydCcsICdQT1NUJywge1xuICAgICAgICBhbW91bnQ6IGNvbnZlcnNpb25EYXRhLmFtb3VudCxcbiAgICAgICAgZnJvbUN1cnJlbmN5OiBjb252ZXJzaW9uRGF0YS5mcm9tQ3VycmVuY3ksXG4gICAgICAgIHRvQ3VycmVuY3k6IGNvbnZlcnNpb25EYXRhLnRvQ3VycmVuY3ksXG4gICAgICAgIHJlZmVyZW5jZTogY29udmVyc2lvbkRhdGEucmVmZXJlbmNlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb252ZXJzaW9uIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRFeGNoYW5nZVJhdGVzKGJhc2VDdXJyZW5jeTogc3RyaW5nID0gJ0JUQycpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvYXBpL3YxL3JhdGVzP2Jhc2U9JHtiYXNlQ3VycmVuY3l9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IGV4Y2hhbmdlIHJhdGVzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRyYW5zYWN0aW9uIEhpc3RvcnlcbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25IaXN0b3J5KHdhbGxldElkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSA1MCwgb2Zmc2V0OiBudW1iZXIgPSAwKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChcbiAgICAgICAgYC9hcGkvdjEvdHJhbnNhY3Rpb25zP3dhbGxldElkPSR7d2FsbGV0SWR9JmxpbWl0PSR7bGltaXR9Jm9mZnNldD0ke29mZnNldH1gXG4gICAgICApO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCB0cmFuc2FjdGlvbiBoaXN0b3J5OiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uRGV0YWlscyh0cmFuc2FjdGlvbklkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGAvYXBpL3YxL3RyYW5zYWN0aW9ucy8ke3RyYW5zYWN0aW9uSWR9YCk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IHRyYW5zYWN0aW9uIGRldGFpbHM6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgLy8gV2ViaG9vayB2ZXJpZmljYXRpb24gKGZvciBiYWNrZW5kIHVzZSlcbiAgdmVyaWZ5V2ViaG9va1NpZ25hdHVyZShwYXlsb2FkOiBzdHJpbmcsIHNpZ25hdHVyZTogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vIEltcGxlbWVudGF0aW9uIHdvdWxkIGRlcGVuZCBvbiBCaXRub2IncyB3ZWJob29rIHNpZ25hdHVyZSBtZXRob2RcbiAgICAvLyBUaGlzIGlzIGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBhY3R1YWwgdmVyaWZpY2F0aW9uIGxvZ2ljXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRTaWduYXR1cmUgPSBjcnlwdG9cbiAgICAgICAgLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAgICAgLnVwZGF0ZShwYXlsb2FkKVxuICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIGNyeXB0by50aW1pbmdTYWZlRXF1YWwoXG4gICAgICAgIEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSwgJ2hleCcpLFxuICAgICAgICBCdWZmZXIuZnJvbShleHBlY3RlZFNpZ25hdHVyZSwgJ2hleCcpXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdXZWJob29rIHNpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBIZWFsdGggY2hlY2tcbiAgYXN5bmMgaGVhbHRoQ2hlY2soKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS92MS9oZWFsdGgnKTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBIZWFsdGggY2hlY2sgZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxufVxuXG4vLyBTaW5nbGV0b24gaW5zdGFuY2UgZm9yIGZyb250ZW5kIHVzZVxubGV0IGJpdG5vYlNlcnZpY2VJbnN0YW5jZTogQml0bm9iU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQml0bm9iU2VydmljZShjb25maWc/OiBCaXRub2JDb25maWcpOiBCaXRub2JTZXJ2aWNlIHtcbiAgaWYgKCFiaXRub2JTZXJ2aWNlSW5zdGFuY2UgfHwgY29uZmlnKSB7XG4gICAgY29uc3Qgc2VydmljZUNvbmZpZyA9IGNvbmZpZyB8fCB7XG4gICAgICBhcGlLZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0JJVE5PQl9BUElfS0VZIHx8ICcnLFxuICAgICAgZW52aXJvbm1lbnQ6IChwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19CSVROT0JfRU5WSVJPTk1FTlQgYXMgJ3NhbmRib3gnIHwgJ3Byb2R1Y3Rpb24nKSB8fCAnc2FuZGJveCcsXG4gICAgICBiYXNlVVJMOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19CSVROT0JfQkFTRV9VUkwsXG4gICAgfTtcblxuICAgIGJpdG5vYlNlcnZpY2VJbnN0YW5jZSA9IG5ldyBCaXRub2JTZXJ2aWNlKHNlcnZpY2VDb25maWcpO1xuICB9XG5cbiAgcmV0dXJuIGJpdG5vYlNlcnZpY2VJbnN0YW5jZTtcbn1cblxuLy8gRGVmYXVsdCBleHBvcnQgZm9yIGNvbnZlbmllbmNlXG5leHBvcnQgY29uc3QgYml0bm9iU2VydmljZSA9IGNyZWF0ZUJpdG5vYlNlcnZpY2UoKTtcbiJdLCJuYW1lcyI6WyJCaXRub2JTZXJ2aWNlIiwibWFrZVJlcXVlc3QiLCJlbmRwb2ludCIsIm1ldGhvZCIsImRhdGEiLCJyZXNwb25zZSIsImZldGNoIiwiYmFzZVVSTCIsImhlYWRlcnMiLCJjb25maWciLCJhcGlLZXkiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCIsInNpZ25hbCIsIkFib3J0U2lnbmFsIiwidGltZW91dCIsIm9rIiwiZXJyb3JEYXRhIiwianNvbiIsImNhdGNoIiwiRXJyb3IiLCJzdGF0dXMiLCJtZXNzYWdlIiwic3RhdHVzVGV4dCIsImVycm9yIiwiY29uc29sZSIsImluY2x1ZGVzIiwibmFtZSIsImlzU2VydmljZUF2YWlsYWJsZSIsIndhcm4iLCJjcmVhdGVXYWxsZXQiLCJ1c2VyRGF0YSIsInBob25lTnVtYmVyIiwiZW1haWwiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsImRhdGVPZkJpcnRoIiwiYWRkcmVzcyIsImdldFdhbGxldERldGFpbHMiLCJ3YWxsZXRJZCIsImdldFdhbGxldEJhbGFuY2UiLCJzZW5kTGlnaHRuaW5nUGF5bWVudCIsInBheW1lbnREYXRhIiwiYW1vdW50IiwiY3VycmVuY3kiLCJyZWNpcGllbnRJZCIsInJlZmVyZW5jZSIsIm5hcnJhdGlvbiIsImNyZWF0ZUxpZ2h0bmluZ0ludm9pY2UiLCJpbnZvaWNlRGF0YSIsIm1lbW8iLCJleHBpcmVzSW4iLCJwYXlMaWdodG5pbmdJbnZvaWNlIiwiaW52b2ljZSIsInNlbmRCaXRjb2luIiwiZ2VuZXJhdGVCaXRjb2luQWRkcmVzcyIsInN1Ym1pdEtZQyIsImt5Y0RhdGEiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsIkZpbGUiLCJhcHBlbmQiLCJ0b1N0cmluZyIsInJlc3VsdCIsImdldEtZQ1N0YXR1cyIsInVzZXJJZCIsImNvbnZlcnRCVENUb0ZpYXQiLCJjb252ZXJzaW9uRGF0YSIsImZyb21DdXJyZW5jeSIsInRvQ3VycmVuY3kiLCJnZXRFeGNoYW5nZVJhdGVzIiwiYmFzZUN1cnJlbmN5IiwiZ2V0VHJhbnNhY3Rpb25IaXN0b3J5IiwibGltaXQiLCJvZmZzZXQiLCJnZXRUcmFuc2FjdGlvbkRldGFpbHMiLCJ0cmFuc2FjdGlvbklkIiwidmVyaWZ5V2ViaG9va1NpZ25hdHVyZSIsInBheWxvYWQiLCJzaWduYXR1cmUiLCJzZWNyZXQiLCJjcnlwdG8iLCJyZXF1aXJlIiwiZXhwZWN0ZWRTaWduYXR1cmUiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwidGltaW5nU2FmZUVxdWFsIiwiQnVmZmVyIiwiZnJvbSIsImhlYWx0aENoZWNrIiwiY29uc3RydWN0b3IiLCJlbnZpcm9ubWVudCIsImJpdG5vYlNlcnZpY2VJbnN0YW5jZSIsImNyZWF0ZUJpdG5vYlNlcnZpY2UiLCJzZXJ2aWNlQ29uZmlnIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0JJVE5PQl9BUElfS0VZIiwiTkVYVF9QVUJMSUNfQklUTk9CX0VOVklST05NRU5UIiwiTkVYVF9QVUJMSUNfQklUTk9CX0JBU0VfVVJMIiwiYml0bm9iU2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/bitnob.service.ts\n"));

/***/ })

});