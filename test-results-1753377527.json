{
  "collection": {
    "item": [
      {
        "id": "f4050a74-e829-4982-aea2-408f921d37e4",
        "name": "Health Check",
        "request": {
          "description": {
            "content": "Check if Bitnob API is healthy and accessible",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
              "type": "text/javascript",
              "exec": [
                "pm.test('Health check successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('API is healthy', function () {",
                "    pm.expect(response).to.have.property('status');",
                "});"
              ],
              "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
            }
          }
        ]
      },
      {
        "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
        "name": "Ping API",
        "request": {
          "description": {
            "content": "Simple ping to test API connectivity",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "ping"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
              "type": "text/javascript",
              "exec": [
                "pm.test('Ping successful', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "console.log('üèì Ping response received');"
              ],
              "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
            }
          }
        ]
      },
      {
        "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
        "name": "Create Wallet",
        "request": {
          "description": {
            "content": "Create a new Bitcoin wallet for testing",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "wallets",
              "create"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
              "type": "text/javascript",
              "exec": [
                "// Generate unique wallet name",
                "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                "pm.request.body.raw = JSON.stringify({",
                "    name: walletName,",
                "    description: 'SACCO Platform Test Wallet'",
                "});",
                "",
                "console.log('üì± Creating wallet:', walletName);"
              ],
              "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
              "type": "text/javascript",
              "exec": [
                "pm.test('Wallet created successfully', function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Response contains wallet data', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('id');",
                "});",
                "",
                "// Store wallet ID for subsequent requests",
                "if (response.data && response.data.id) {",
                "    pm.collectionVariables.set('wallet_id', response.data.id);",
                "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                "}"
              ],
              "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
            }
          }
        ]
      },
      {
        "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
        "name": "Get Wallet Details",
        "request": {
          "description": {
            "content": "Get details of the created wallet",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "wallets",
              "{{wallet_id}}"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üîç Getting details for wallet:', walletId);"
              ],
              "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Wallet details retrieved', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Wallet data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('balance');",
                "});",
                "",
                "console.log('üí∞ Wallet Balance:', response.data.balance);"
              ],
              "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
            }
          }
        ]
      },
      {
        "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
        "name": "Get Wallet Balance",
        "request": {
          "description": {
            "content": "Check the current balance of the wallet",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "wallets",
              "{{wallet_id}}",
              "balance"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üí∞ Checking balance for wallet:', walletId);"
              ],
              "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49926e68-f065-4a68-88c3-a740ca255375",
              "type": "text/javascript",
              "exec": [
                "pm.test('Balance retrieved successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Balance data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('available_balance');",
                "});",
                "",
                "console.log('üíµ Available Balance:', response.data.available_balance);"
              ],
              "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
            }
          }
        ]
      },
      {
        "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
        "name": "Create Lightning Invoice",
        "request": {
          "description": {
            "content": "Create a Lightning Network invoice for receiving payments",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "lightning",
              "invoice"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "",
                "// Create invoice for 1000 satoshis (0.00001 BTC)",
                "const invoiceData = {",
                "    amount: 1000,",
                "    description: 'SACCO Platform Savings Deposit Test',",
                "    reference: pm.collectionVariables.get('payment_reference'),",
                "    walletId: walletId",
                "};",
                "",
                "pm.request.body.raw = JSON.stringify(invoiceData);",
                "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
              ],
              "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
              "type": "text/javascript",
              "exec": [
                "pm.test('Lightning invoice created', function () {",
                "    pm.response.to.have.status(201);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Invoice contains payment request', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('payment_request');",
                "});",
                "",
                "// Store invoice ID for testing",
                "if (response.data && response.data.id) {",
                "    pm.collectionVariables.set('invoice_id', response.data.id);",
                "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                "}"
              ],
              "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
            }
          }
        ]
      },
      {
        "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
        "name": "Send Lightning Payment",
        "request": {
          "description": {
            "content": "Send a Lightning Network payment (requires valid invoice)",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "lightning",
              "send"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "",
                "// Example Lightning invoice for testing (use a real testnet invoice)",
                "const paymentData = {",
                "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                "    amount: 1000,",
                "    reference: pm.collectionVariables.get('payment_reference'),",
                "    narration: 'SACCO Platform Test Payment'",
                "};",
                "",
                "pm.request.body.raw = JSON.stringify(paymentData);",
                "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
              ],
              "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
              "type": "text/javascript",
              "exec": [
                "// Note: This will likely fail without a valid invoice",
                "if (pm.response.code === 200 || pm.response.code === 201) {",
                "    pm.test('Lightning payment sent successfully', function () {",
                "        pm.response.to.have.status(200);",
                "    });",
                "    ",
                "    const response = pm.response.json();",
                "    console.log('‚ö° Payment successful:', response);",
                "} else {",
                "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                "    console.log('Response:', pm.response.text());",
                "}"
              ],
              "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
            }
          }
        ]
      },
      {
        "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
        "name": "Generate Bitcoin Address",
        "request": {
          "description": {
            "content": "Generate a new Bitcoin address for receiving funds",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "bitcoin",
              "address",
              "{{wallet_id}}"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
              ],
              "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
              "type": "text/javascript",
              "exec": [
                "pm.test('Bitcoin address generated', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Address is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.have.property('address');",
                "});",
                "",
                "console.log('üè† Bitcoin Address:', response.data.address);"
              ],
              "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
            }
          }
        ]
      },
      {
        "id": "4396390f-238d-4516-8f47-f522bd042517",
        "name": "Get Exchange Rates",
        "request": {
          "description": {
            "content": "Get current Bitcoin exchange rates",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "rates"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "base",
                "value": "BTC"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
              "type": "text/javascript",
              "exec": [
                "pm.test('Exchange rates retrieved', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('Rates data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "});",
                "",
                "if (response.data) {",
                "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                "}"
              ],
              "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
            }
          }
        ]
      },
      {
        "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
        "name": "Get Transaction History",
        "request": {
          "description": {
            "content": "Get transaction history for the wallet",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "transactions"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "walletId",
                "value": "{{wallet_id}}"
              },
              {
                "key": "limit",
                "value": "10"
              },
              {
                "key": "offset",
                "value": "0"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
              "type": "text/javascript",
              "exec": [
                "const walletId = pm.collectionVariables.get('wallet_id');",
                "if (!walletId) {",
                "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                "}",
                "console.log('üìú Getting transaction history for wallet:', walletId);"
              ],
              "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
              "type": "text/javascript",
              "exec": [
                "pm.test('Transaction history retrieved', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "const response = pm.response.json();",
                "pm.test('History data is valid', function () {",
                "    pm.expect(response).to.have.property('data');",
                "    pm.expect(response.data).to.be.an('array');",
                "});",
                "",
                "console.log('üìú Transaction count:', response.data.length);"
              ],
              "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "bearer",
      "bearer": [
        {
          "type": "string",
          "value": "{{api_key}}",
          "key": "token"
        }
      ]
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
            "",
            "// Set timestamp for reference generation",
            "pm.globals.set('timestamp', Date.now());",
            "",
            "// Generate unique reference for payments",
            "const reference = 'SACCO_' + pm.globals.get('timestamp');",
            "pm.collectionVariables.set('payment_reference', reference);",
            "",
            "// Log current environment",
            "console.log('üåç Environment: Sandbox');",
            "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
          ],
          "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "console.log('‚úÖ Response Status:', pm.response.code);",
            "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
            "",
            "// Basic response validation",
            "pm.test('Response status is successful', function () {",
            "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
            "});",
            "",
            "pm.test('Response time is acceptable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(10000);",
            "});",
            "",
            "// Log response for debugging",
            "if (pm.response.code >= 400) {",
            "    console.error('‚ùå Error Response:', pm.response.text());",
            "} else {",
            "    console.log('üìÑ Response Body:', pm.response.json());",
            "}"
          ],
          "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "https://sandboxapi.bitnob.co",
        "key": "base_url"
      },
      {
        "type": "string",
        "value": "{{BITNOB_API_KEY}}",
        "key": "api_key"
      },
      {
        "type": "string",
        "value": "",
        "key": "wallet_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "invoice_id"
      },
      {
        "type": "string",
        "value": "",
        "key": "payment_reference"
      }
    ],
    "info": {
      "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
      "name": "Bitnob API Testing Collection",
      "version": {
        "raw": "1.0.0",
        "major": 1,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "bitnob-sandbox-environment",
    "name": "Bitnob Sandbox Environment",
    "values": [
      {
        "description": {
          "content": "Your Bitnob API key for sandbox testing",
          "type": "text/plain"
        },
        "type": "any",
        "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
        "key": "BITNOB_API_KEY"
      },
      {
        "description": {
          "content": "Bitnob sandbox API base URL",
          "type": "text/plain"
        },
        "type": "any",
        "value": "https://sandboxapi.bitnob.co",
        "key": "BITNOB_BASE_URL"
      },
      {
        "description": {
          "content": "Current environment (sandbox/production)",
          "type": "text/plain"
        },
        "type": "any",
        "value": "sandbox",
        "key": "BITNOB_ENVIRONMENT"
      }
    ]
  },
  "globals": {
    "id": "c6fd7608-c8a7-4f5c-8dc0-7e6d40bfca15",
    "values": [
      {
        "type": "any",
        "value": 1753377591290,
        "key": "timestamp"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 37,
        "pending": 0,
        "failed": 10
      },
      "prerequests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 37,
        "pending": 0,
        "failed": 24
      },
      "testScripts": {
        "total": 20,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 17,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 297.8,
      "responseMin": 181,
      "responseMax": 1244,
      "responseSd": 315.463722161519,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1753377576708,
      "completed": 1753377591636
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 10,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0e23f095-1943-4120-885c-00a7fdd864e8",
          "httpRequestId": "875c8d23-715b-416f-8e12-cd586a7d0eae"
        },
        "item": {
          "id": "f4050a74-e829-4982-aea2-408f921d37e4",
          "name": "Health Check",
          "request": {
            "description": {
              "content": "Check if Bitnob API is healthy and accessible",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('API is healthy', function () {",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Check if Bitnob API is healthy and accessible",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "health"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b0e10625-e8d5-4e86-a3b2-6bc28dc7363b",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7e99d310-1521-460c-b7af-9d0638efbb4c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:38 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "101"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "499"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377639"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_A8EA5321C4E5469599D6835F9AF5E065"
            },
            {
              "key": "ETag",
              "value": "W/\"65-5fn2EhXoSTMOegV3JtjoHnuo+e8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              105,
              110,
              102,
              111,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              117,
              112,
              34,
              125,
              125,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              117,
              112,
              34,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1244,
          "responseSize": 101
        },
        "id": "f4050a74-e829-4982-aea2-408f921d37e4",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Health check successful",
            "skipped": false
          },
          {
            "assertion": "API is healthy",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "03c1f2b4-2910-4163-90c6-dd056cc2bbc8",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fda075d3-5685-4d57-9a00-a4db12413c4a"
        },
        "item": {
          "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
          "name": "Ping API",
          "request": {
            "description": {
              "content": "Simple ping to test API connectivity",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Ping successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('üèì Ping response received');"
                ],
                "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Simple ping to test API connectivity",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "ping"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc1e2a26-bf24-48df-ac56-93539e376fc1",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e078759d-486a-4f50-8440-d1396f840fe7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "101"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "499"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377641"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_51B71F4E7D9341C68D80BEE753E1AE01"
            },
            {
              "key": "ETag",
              "value": "W/\"65-ZoMteRYGZiRKZOSbTM+GfKtCuz8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              112,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              112,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              48,
              46,
              51,
              53,
              51,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 203,
          "responseSize": 101
        },
        "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Ping successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Ping successful",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b5eb1b7-be59-40fa-8bca-b2be03ea7b99",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4bf7899-0a88-4468-97ea-64ad1e659173"
        },
        "item": {
          "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Create a new Bitcoin wallet for testing",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "wallets",
              "create"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "12b9150b-a7f6-4a65-828e-2abbfd5b0393",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "80",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"SACCO_Wallet_1753377581677\",\"description\":\"SACCO Platform Test Wallet\"}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "bdf04068-ab66-4896-bc10-d5dba5d74160",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:41 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "122"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "498"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377639"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_27CA0B9C92214236897267D7FCB84417"
            },
            {
              "key": "ETag",
              "value": "W/\"7a-iHjYAfpNXob/T/wMQlKXiTPybHo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              99,
              114,
              101,
              97,
              116,
              101,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              49,
              46,
              56,
              48,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 189,
          "responseSize": 122
        },
        "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Wallet created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Wallet created successfully",
              "message": "expected response to have status code 201 but got 404",
              "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response contains wallet data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains wallet data",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cec752f-abcb-464e-aa8c-a0f0105cd5ae",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c449cb8-7ea9-49a2-a690-390806b4b8cc"
        },
        "item": {
          "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "3c19e37e-c4dd-4c61-bc8a-6f70d09a576c",
              "timestamp": 1753377583124,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Get details of the created wallet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "wallets",
              ""
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c000b1f-e659-40ad-bf51-24e452829a8b",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c6bba866-4584-4b62-bd53-468131c9e70a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "109"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "498"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377641"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_A8F7A4172CAE4F148A143C81521909C4"
            },
            {
              "key": "ETag",
              "value": "W/\"6d-jxyvpf69eCyFn4wRfQWEfyar7vE\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              51,
              46,
              50,
              48,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 193,
          "responseSize": 109
        },
        "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Wallet details retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Wallet details retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Wallet data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Wallet data is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'balance')",
              "checksum": "f355c3880dacb2836058d37ad87f8c47",
              "id": "14ab5020-af41-4476-abba-e218e857cdcb",
              "timestamp": 1753377583452,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cc6cc152-18a9-4da5-a8b1-703af8e9da01",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27419010-51f4-461f-964d-b72e60dc5fef"
        },
        "item": {
          "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "49926e68-f065-4a68-88c3-a740ca255375",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "dd5c9d01-c201-41dd-9cee-7fb8f812cefb",
              "timestamp": 1753377584514,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Check the current balance of the wallet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "wallets",
              "",
              "balance"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "45bc967f-2745-4611-8057-9cc32b9ec255",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "aeab2645-b2f3-4ea1-a7cf-81c9ba25490e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:44 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "125"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "497"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377639"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_2EBB561B6A8548EE8220120707778B21"
            },
            {
              "key": "ETag",
              "value": "W/\"7d-CdsU+rm7OFXHuSKguxzOWM9VvFY\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              47,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              119,
              97,
              108,
              108,
              101,
              116,
              115,
              47,
              47,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              52,
              46,
              53,
              56,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 181,
          "responseSize": 125
        },
        "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Balance retrieved successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Balance retrieved successfully",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Balance data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Balance data is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'available_balance')",
              "checksum": "783b1d98b40940e1067f47fd0ff3385c",
              "id": "69c29666-306e-4996-8485-d93fed401680",
              "timestamp": 1753377584791,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e0e9a5c6-f708-4889-b91b-19ce9c8ec64f",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be1231bd-ef49-4ca9-93d4-65ecdba6dc54"
        },
        "item": {
          "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "d6f64b52-3097-49a5-93b5-1ddd1d7072c0",
              "timestamp": 1753377585877,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Create a Lightning Network invoice for receiving payments",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "lightning",
              "invoice"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e37a22d5-d2fe-46b3-808a-658ff18ab62d",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b56392cb-1642-4286-83f6-300c1b6993ce",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:45 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "128"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "497"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377641"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_7F94A68CCC3C41AD8ADFB269EFF3894D"
            },
            {
              "key": "ETag",
              "value": "W/\"80-CwqTZTwFck4iEmYlhDoe9zXhrNU\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              105,
              110,
              118,
              111,
              105,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              105,
              110,
              118,
              111,
              105,
              99,
              101,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              53,
              46,
              57,
              53,
              52,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 198,
          "responseSize": 128
        },
        "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Lightning invoice created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Lightning invoice created",
              "message": "expected response to have status code 201 but got 404",
              "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Invoice contains payment request",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Invoice contains payment request",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b922664-4288-4cc0-bce1-962a65dabef3",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8a5e8369-3b7e-4f5a-813b-8f71a7b5cdfb"
        },
        "item": {
          "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
          "name": "Send Lightning Payment",
          "request": {
            "description": {
              "content": "Send a Lightning Network payment (requires valid invoice)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Example Lightning invoice for testing (use a real testnet invoice)",
                  "const paymentData = {",
                  "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                  "    amount: 1000,",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    narration: 'SACCO Platform Test Payment'",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(paymentData);",
                  "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                  "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                ],
                "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                "type": "text/javascript",
                "exec": [
                  "// Note: This will likely fail without a valid invoice",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Lightning payment sent successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö° Payment successful:', response);",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "ce4b59ed-6e89-400e-80c2-64f5c6f0c981",
              "timestamp": 1753377587269,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Send a Lightning Network payment (requires valid invoice)",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "lightning",
              "send"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6122a050-9d14-4920-9625-3d98a922460e",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": ""
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ed846269-0a05-461f-a291-dede7a081bd2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "122"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "496"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377639"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_6B02B671D5F7486698922591771F64A1"
            },
            {
              "key": "ETag",
              "value": "W/\"7a-tNvet2kLcUc8MHGXDn95zJLf5x8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              115,
              101,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              108,
              105,
              103,
              104,
              116,
              110,
              105,
              110,
              103,
              47,
              115,
              101,
              110,
              100,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              55,
              46,
              51,
              52,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 186,
          "responseSize": 122
        },
        "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4ea91d4b-6689-4bc7-a9de-ff3f73ff8632",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b988c020-d0f7-497c-b88c-6ad11534ecf1"
        },
        "item": {
          "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "1b6dec1f-1d23-46bc-8a66-5ea213a0ead9",
              "timestamp": 1753377588621,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Generate a new Bitcoin address for receiving funds",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "bitcoin",
              "address",
              ""
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b4d90fbd-714d-4669-9ce5-5a5377567fa7",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a6f961b2-14a6-4072-a6ef-fa0ff28edbbb",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "126"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "496"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377641"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_0C4B746F85D041C29AEADD894A3CC85C"
            },
            {
              "key": "ETag",
              "value": "W/\"7e-zLwzQvZFC7xfYGhcCv5ncy3hogs\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              98,
              105,
              116,
              99,
              111,
              105,
              110,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              47,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              98,
              105,
              116,
              99,
              111,
              105,
              110,
              47,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              47,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              52,
              56,
              46,
              54,
              57,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 195,
          "responseSize": 126
        },
        "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Bitcoin address generated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Bitcoin address generated",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Address is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Address is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'address')",
              "checksum": "c93e9f7fd14f904d306737dcd0467de4",
              "id": "7b32e9c0-1842-42e2-b449-1dedb7befd0c",
              "timestamp": 1753377588913,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "55e87b27-79a1-4cd3-9b9c-e68fa6d9ddb1",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1942ef7b-e5d0-49aa-9ffb-4df0fd73259e"
        },
        "item": {
          "id": "4396390f-238d-4516-8f47-f522bd042517",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Get current Bitcoin exchange rates",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "rates"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [
              {
                "key": "base",
                "value": "BTC"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9eb13405-5176-4bea-90a1-7a6e41a315ce",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "59fd198d-8e1e-47d8-9d0c-10471a25cdc5",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:50 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "121"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "495"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377639"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_40A882812B414C93A24ECBBD12EE8985"
            },
            {
              "key": "ETag",
              "value": "W/\"79-Gs1q7a/yXk5C6Orm+tiEMLdg3aw\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              114,
              97,
              116,
              101,
              115,
              63,
              98,
              97,
              115,
              101,
              61,
              66,
              84,
              67,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              114,
              97,
              116,
              101,
              115,
              63,
              98,
              97,
              115,
              101,
              61,
              66,
              84,
              67,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              53,
              48,
              46,
              48,
              51,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 200,
          "responseSize": 121
        },
        "id": "4396390f-238d-4516-8f47-f522bd042517",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Exchange rates retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Exchange rates retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Rates data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Rates data is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d6d18d9f-7118-4282-a8e3-087d11c87450",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d747ce1c-2d07-4541-90c5-8072d08e4b1d"
        },
        "item": {
          "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "Error",
              "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
              "checksum": "43c042683105df1dfc7b8ec8a41467a9",
              "id": "cc38cd8b-54f3-4bd6-889b-d51672a389f5",
              "timestamp": 1753377591324,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "description": {
            "content": "Get transaction history for the wallet",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "transactions"
            ],
            "host": [
              "sandboxapi",
              "bitnob",
              "co"
            ],
            "query": [
              {
                "key": "walletId",
                "value": ""
              },
              {
                "key": "limit",
                "value": "10"
              },
              {
                "key": "offset",
                "value": "0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75da9cc1-bf9f-4e9f-95d3-471fdd7f6a5c",
              "system": true
            },
            {
              "key": "Host",
              "value": "sandboxapi.bitnob.co",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "hsk.d550cb2465fe.d92cf979e734a2baae0470a48",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a08abfe3-db72-47f6-ace3-09da45a711b7",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 24 Jul 2025 17:19:51 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "173"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'self';style-src 'self' 'unsafe-inline';img-src 'self' data: validator.swagger.io;script-src 'self' https: 'unsafe-inline'"
            },
            {
              "key": "X-DNS-Prefetch-Control",
              "value": "off"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=0"
            },
            {
              "key": "X-Frame-Options",
              "value": "SAMEORIGIN"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=15552000; includeSubDomains"
            },
            {
              "key": "X-Download-Options",
              "value": "noopen"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Permitted-Cross-Domain-Policies",
              "value": "none"
            },
            {
              "key": "Referrer-Policy",
              "value": "no-referrer"
            },
            {
              "key": "X-XSS-Protection",
              "value": "0"
            },
            {
              "key": "X-RateLimit-Limit",
              "value": "500"
            },
            {
              "key": "X-RateLimit-Remaining",
              "value": "495"
            },
            {
              "key": "X-RateLimit-Reset",
              "value": "1753377641"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "X-Request-Id",
              "value": "REQUEST_ID_A9BE392F2A3D4473AA158129EA85CD03"
            },
            {
              "key": "ETag",
              "value": "W/\"ad-a54L38N++yTCI2w7cBkpPQJVTpI\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              63,
              119,
              97,
              108,
              108,
              101,
              116,
              73,
              100,
              61,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              38,
              111,
              102,
              102,
              115,
              101,
              116,
              61,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              44,
              34,
              112,
              97,
              116,
              104,
              34,
              58,
              34,
              47,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              63,
              119,
              97,
              108,
              108,
              101,
              116,
              73,
              100,
              61,
              38,
              108,
              105,
              109,
              105,
              116,
              61,
              49,
              48,
              38,
              111,
              102,
              102,
              115,
              101,
              116,
              61,
              48,
              34,
              44,
              34,
              116,
              105,
              109,
              101,
              115,
              116,
              97,
              109,
              112,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              50,
              52,
              84,
              49,
              55,
              58,
              49,
              57,
              58,
              53,
              49,
              46,
              52,
              48,
              57,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 189,
          "responseSize": 173
        },
        "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
        "assertions": [
          {
            "assertion": "Response status is successful",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response status is successful",
              "message": "expected 404 to be one of [ 200, 201, 202 ]",
              "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false
          },
          {
            "assertion": "Transaction history retrieved",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Transaction history retrieved",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "History data is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "History data is valid",
              "message": "expected { ‚Ä¶(4) } to have property 'data'",
              "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'length')",
              "checksum": "e774b6286904655bab7fadbd0aa88e6c",
              "id": "343319a3-e553-4dcf-979f-3267a7f2ddc7",
              "timestamp": 1753377591627,
              "stacktrace": []
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1228
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "feb4b09fa62abbf5e8de9edd434e66b9",
          "id": "7374068b-adad-4045-a148-c33934fad5a0",
          "timestamp": 1753377580566,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
          "name": "Ping API",
          "request": {
            "description": {
              "content": "Simple ping to test API connectivity",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Ping successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('üèì Ping response received');"
                ],
                "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "03c1f2b4-2910-4163-90c6-dd056cc2bbc8",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fda075d3-5685-4d57-9a00-a4db12413c4a",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "f6688515-df20-4dae-b950-8935527775c5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Ping successful",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "350d1f9a100add0d627b5bd2cf263cd9",
          "id": "b990adfb-9127-436e-b678-c6c99903e939",
          "timestamp": 1753377580631,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
          "name": "Ping API",
          "request": {
            "description": {
              "content": "Simple ping to test API connectivity",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Ping successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log('üèì Ping response received');"
                ],
                "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "03c1f2b4-2910-4163-90c6-dd056cc2bbc8",
          "length": 10,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fda075d3-5685-4d57-9a00-a4db12413c4a",
          "scriptId": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
          "execution": "4180fdda-39aa-4926-b00b-971549073c0d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "b6d9f95eef982bf6cdc38696946c45fa",
          "id": "6838ebbe-4e72-4202-9e8b-fb24c06edd18",
          "timestamp": 1753377581983,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "8b5eb1b7-be59-40fa-8bca-b2be03ea7b99",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4bf7899-0a88-4468-97ea-64ad1e659173",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "757fe434-02a3-44ca-89fd-59c8329eaf11"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Wallet created successfully",
          "message": "expected response to have status code 201 but got 404",
          "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "986093bcac089cd4c190704b8a0bed90",
          "id": "f55a1557-3670-4bd5-94b7-4f4c09f13b5d",
          "timestamp": 1753377582047,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "8b5eb1b7-be59-40fa-8bca-b2be03ea7b99",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4bf7899-0a88-4468-97ea-64ad1e659173",
          "scriptId": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
          "execution": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains wallet data",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "ad693fe3c5d54348f827fddd990b049e",
          "id": "281651a8-fc70-44be-8917-849d6bf01970",
          "timestamp": 1753377582054,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
          "name": "Create Wallet",
          "request": {
            "description": {
              "content": "Create a new Bitcoin wallet for testing",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "create"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                "type": "text/javascript",
                "exec": [
                  "// Generate unique wallet name",
                  "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                  "pm.request.body.raw = JSON.stringify({",
                  "    name: walletName,",
                  "    description: 'SACCO Platform Test Wallet'",
                  "});",
                  "",
                  "console.log('üì± Creating wallet:', walletName);"
                ],
                "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Response contains wallet data', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "});",
                  "",
                  "// Store wallet ID for subsequent requests",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('wallet_id', response.data.id);",
                  "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                  "}"
                ],
                "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "8b5eb1b7-be59-40fa-8bca-b2be03ea7b99",
          "length": 10,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4bf7899-0a88-4468-97ea-64ad1e659173",
          "scriptId": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
          "execution": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "3c19e37e-c4dd-4c61-bc8a-6f70d09a576c",
          "timestamp": 1753377583124,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4cec752f-abcb-464e-aa8c-a0f0105cd5ae",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "scriptId": "2254ad71-fa41-40c1-a752-3854fd7f6074"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "b4e03a6ffc636a5328c222ea9f54304a",
          "id": "f3a00290-fae2-4a63-9a8a-f5ce0eb7bd19",
          "timestamp": 1753377583356,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4cec752f-abcb-464e-aa8c-a0f0105cd5ae",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c449cb8-7ea9-49a2-a690-390806b4b8cc",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "f097124f-bd59-4d24-b7f0-47ca5f410f8b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Wallet details retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "b6efc226147bc05307430ef5c4f28211",
          "id": "0756ca10-37ea-4660-8b31-6eee0f256bab",
          "timestamp": 1753377583402,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4cec752f-abcb-464e-aa8c-a0f0105cd5ae",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c449cb8-7ea9-49a2-a690-390806b4b8cc",
          "scriptId": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
          "execution": "5378d868-26ad-4881-9b85-fff1b402a3f0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Wallet data is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "9bfeb3bb2234503c8c461e05562240c7",
          "id": "75c8aee8-27fe-4f96-bdac-3ff6f6cb6e0c",
          "timestamp": 1753377583409,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4cec752f-abcb-464e-aa8c-a0f0105cd5ae",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c449cb8-7ea9-49a2-a690-390806b4b8cc",
          "scriptId": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
          "execution": "5378d868-26ad-4881-9b85-fff1b402a3f0"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'balance')",
          "checksum": "f355c3880dacb2836058d37ad87f8c47",
          "id": "14ab5020-af41-4476-abba-e218e857cdcb",
          "timestamp": 1753377583452,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
          "name": "Get Wallet Details",
          "request": {
            "description": {
              "content": "Get details of the created wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üîç Getting details for wallet:', walletId);"
                ],
                "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Wallet details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Wallet data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('balance');",
                  "});",
                  "",
                  "console.log('üí∞ Wallet Balance:', response.data.balance);"
                ],
                "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4cec752f-abcb-464e-aa8c-a0f0105cd5ae",
          "length": 10,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2c449cb8-7ea9-49a2-a690-390806b4b8cc",
          "scriptId": "351af2b8-d770-4959-b0e1-f7e4c94011d8"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "dd5c9d01-c201-41dd-9cee-7fb8f812cefb",
          "timestamp": 1753377584514,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "49926e68-f065-4a68-88c3-a740ca255375",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cc6cc152-18a9-4da5-a8b1-703af8e9da01",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "scriptId": "198642f4-e602-4b82-8a39-c5231dcec93f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "5329038d04c8206a016fcda1bc1c87ad",
          "id": "02780cb8-1ba3-42f7-99dd-03280a9c68e1",
          "timestamp": 1753377584733,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "49926e68-f065-4a68-88c3-a740ca255375",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cc6cc152-18a9-4da5-a8b1-703af8e9da01",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27419010-51f4-461f-964d-b72e60dc5fef",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "7b9ddb8c-83da-457d-92b5-c0f367994ad5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Balance retrieved successfully",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "d2b2a0f6d7b680cfb0869b09963e27f4",
          "id": "aaf22b8b-3c96-4f18-b4d3-3cbcb531e3cb",
          "timestamp": 1753377584779,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "49926e68-f065-4a68-88c3-a740ca255375",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cc6cc152-18a9-4da5-a8b1-703af8e9da01",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27419010-51f4-461f-964d-b72e60dc5fef",
          "scriptId": "49926e68-f065-4a68-88c3-a740ca255375",
          "execution": "bb617b40-3876-4401-9ad9-3600df805394"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Balance data is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "3bd0ec9306585ed400a956e55a0deaaf",
          "id": "db0b53bf-3f06-4f03-9964-2c3dd8ed77e6",
          "timestamp": 1753377584784,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "49926e68-f065-4a68-88c3-a740ca255375",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cc6cc152-18a9-4da5-a8b1-703af8e9da01",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27419010-51f4-461f-964d-b72e60dc5fef",
          "scriptId": "49926e68-f065-4a68-88c3-a740ca255375",
          "execution": "bb617b40-3876-4401-9ad9-3600df805394"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'available_balance')",
          "checksum": "783b1d98b40940e1067f47fd0ff3385c",
          "id": "69c29666-306e-4996-8485-d93fed401680",
          "timestamp": 1753377584791,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
          "name": "Get Wallet Balance",
          "request": {
            "description": {
              "content": "Check the current balance of the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "wallets",
                "{{wallet_id}}",
                "balance"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üí∞ Checking balance for wallet:', walletId);"
                ],
                "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "49926e68-f065-4a68-88c3-a740ca255375",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Balance retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Balance data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('available_balance');",
                  "});",
                  "",
                  "console.log('üíµ Available Balance:', response.data.available_balance);"
                ],
                "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cc6cc152-18a9-4da5-a8b1-703af8e9da01",
          "length": 10,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27419010-51f4-461f-964d-b72e60dc5fef",
          "scriptId": "49926e68-f065-4a68-88c3-a740ca255375"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "d6f64b52-3097-49a5-93b5-1ddd1d7072c0",
          "timestamp": 1753377585877,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e0e9a5c6-f708-4889-b91b-19ce9c8ec64f",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "scriptId": "d2548c7f-486d-407a-9ce1-53c476a55b49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "539e56db1af97c98733aeee8b4cd5ba7",
          "id": "1dc82ec4-5713-4cdd-b1a2-33f83fd370f0",
          "timestamp": 1753377586142,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e0e9a5c6-f708-4889-b91b-19ce9c8ec64f",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be1231bd-ef49-4ca9-93d4-65ecdba6dc54",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "bf9e892b-20f9-45b7-a0dd-7916003867cd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Lightning invoice created",
          "message": "expected response to have status code 201 but got 404",
          "stack": "AssertionError: expected response to have status code 201 but got 404\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "c084da819e8b7bf14857cd582db3ea87",
          "id": "c20641ca-acdf-465d-8b6c-36c118ce70d8",
          "timestamp": 1753377586193,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e0e9a5c6-f708-4889-b91b-19ce9c8ec64f",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be1231bd-ef49-4ca9-93d4-65ecdba6dc54",
          "scriptId": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
          "execution": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Invoice contains payment request",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "0fb653276afca0329fcc69513bd8a053",
          "id": "70978c8b-5b4b-436f-a350-f318687b8c4b",
          "timestamp": 1753377586199,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
          "name": "Create Lightning Invoice",
          "request": {
            "description": {
              "content": "Create a Lightning Network invoice for receiving payments",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "invoice"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Create invoice for 1000 satoshis (0.00001 BTC)",
                  "const invoiceData = {",
                  "    amount: 1000,",
                  "    description: 'SACCO Platform Savings Deposit Test',",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    walletId: walletId",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(invoiceData);",
                  "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                ],
                "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Lightning invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Invoice contains payment request', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('payment_request');",
                  "});",
                  "",
                  "// Store invoice ID for testing",
                  "if (response.data && response.data.id) {",
                  "    pm.collectionVariables.set('invoice_id', response.data.id);",
                  "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                  "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                  "}"
                ],
                "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e0e9a5c6-f708-4889-b91b-19ce9c8ec64f",
          "length": 10,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "be1231bd-ef49-4ca9-93d4-65ecdba6dc54",
          "scriptId": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
          "execution": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "ce4b59ed-6e89-400e-80c2-64f5c6f0c981",
          "timestamp": 1753377587269,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
          "name": "Send Lightning Payment",
          "request": {
            "description": {
              "content": "Send a Lightning Network payment (requires valid invoice)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Example Lightning invoice for testing (use a real testnet invoice)",
                  "const paymentData = {",
                  "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                  "    amount: 1000,",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    narration: 'SACCO Platform Test Payment'",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(paymentData);",
                  "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                  "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                ],
                "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                "type": "text/javascript",
                "exec": [
                  "// Note: This will likely fail without a valid invoice",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Lightning payment sent successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö° Payment successful:', response);",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "0b922664-4288-4cc0-bce1-962a65dabef3",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "scriptId": "704099a7-1e89-4a16-929a-9c3440ffad5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "8d9b489a97aeed2ebb3b8adb463fe14f",
          "id": "1492e446-2fc2-4b51-b97b-2d439fbf5355",
          "timestamp": 1753377587504,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
          "name": "Send Lightning Payment",
          "request": {
            "description": {
              "content": "Send a Lightning Network payment (requires valid invoice)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "lightning",
                "send"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "",
                  "// Example Lightning invoice for testing (use a real testnet invoice)",
                  "const paymentData = {",
                  "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                  "    amount: 1000,",
                  "    reference: pm.collectionVariables.get('payment_reference'),",
                  "    narration: 'SACCO Platform Test Payment'",
                  "};",
                  "",
                  "pm.request.body.raw = JSON.stringify(paymentData);",
                  "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                  "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                ],
                "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                "type": "text/javascript",
                "exec": [
                  "// Note: This will likely fail without a valid invoice",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    pm.test('Lightning payment sent successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö° Payment successful:', response);",
                  "} else {",
                  "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ],
                "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "0b922664-4288-4cc0-bce1-962a65dabef3",
          "length": 10,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8a5e8369-3b7e-4f5a-813b-8f71a7b5cdfb",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "a5bdd51c-e851-431e-a0cf-725e7804c7a1"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "1b6dec1f-1d23-46bc-8a66-5ea213a0ead9",
          "timestamp": 1753377588621,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4ea91d4b-6689-4bc7-a9de-ff3f73ff8632",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "scriptId": "c84bc633-c864-40c5-8a7c-643c9e1662f7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "2ea9eecdfd2397af56f86c600fc02cc1",
          "id": "973526d8-d37a-44ca-b47e-f8067ea0363f",
          "timestamp": 1753377588857,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4ea91d4b-6689-4bc7-a9de-ff3f73ff8632",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b988c020-d0f7-497c-b88c-6ad11534ecf1",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "bb6ed5d9-d859-44b0-b72b-b928838e078e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Bitcoin address generated",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "9647e9501f188bc218a7b75d3faf3cf4",
          "id": "cbfd1ce1-2c6b-443e-9d85-7c277a54c51d",
          "timestamp": 1753377588906,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4ea91d4b-6689-4bc7-a9de-ff3f73ff8632",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b988c020-d0f7-497c-b88c-6ad11534ecf1",
          "scriptId": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
          "execution": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Address is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "d7d5b9e17d101e3ce382aebed405e139",
          "id": "d3ade7e8-4a64-4a76-b48a-48f457245ab9",
          "timestamp": 1753377588909,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4ea91d4b-6689-4bc7-a9de-ff3f73ff8632",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b988c020-d0f7-497c-b88c-6ad11534ecf1",
          "scriptId": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
          "execution": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'address')",
          "checksum": "c93e9f7fd14f904d306737dcd0467de4",
          "id": "7b32e9c0-1842-42e2-b449-1dedb7befd0c",
          "timestamp": 1753377588913,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
          "name": "Generate Bitcoin Address",
          "request": {
            "description": {
              "content": "Generate a new Bitcoin address for receiving funds",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "bitcoin",
                "address",
                "{{wallet_id}}"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                ],
                "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Bitcoin address generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Address is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('address');",
                  "});",
                  "",
                  "console.log('üè† Bitcoin Address:', response.data.address);"
                ],
                "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "4ea91d4b-6689-4bc7-a9de-ff3f73ff8632",
          "length": 10,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b988c020-d0f7-497c-b88c-6ad11534ecf1",
          "scriptId": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "429a73618822db9ef201fe2fdab04f25",
          "id": "f23e4382-7259-47f5-ab14-9fe48b827157",
          "timestamp": 1753377590220,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4396390f-238d-4516-8f47-f522bd042517",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "55e87b27-79a1-4cd3-9b9c-e68fa6d9ddb1",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1942ef7b-e5d0-49aa-9ffb-4df0fd73259e",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "92b7995a-fa43-4503-a70e-ac5f6bca94eb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Exchange rates retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "86aaee5be74e5ac61647aebc4bcd3785",
          "id": "deb33b3c-d7c2-4374-a9f5-d373222c13a0",
          "timestamp": 1753377590259,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4396390f-238d-4516-8f47-f522bd042517",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "55e87b27-79a1-4cd3-9b9c-e68fa6d9ddb1",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1942ef7b-e5d0-49aa-9ffb-4df0fd73259e",
          "scriptId": "ccbf3646-83b1-46ea-a072-95f04d16b630",
          "execution": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Rates data is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "93dcc1d83321de31f76c3cc5c1c63bbc",
          "id": "6c470c40-7e05-4c9b-ae01-a2f7dbf68710",
          "timestamp": 1753377590262,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4396390f-238d-4516-8f47-f522bd042517",
          "name": "Get Exchange Rates",
          "request": {
            "description": {
              "content": "Get current Bitcoin exchange rates",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "rates"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "base",
                  "value": "BTC"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Exchange rates retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('Rates data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "});",
                  "",
                  "if (response.data) {",
                  "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                  "}"
                ],
                "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "55e87b27-79a1-4cd3-9b9c-e68fa6d9ddb1",
          "length": 10,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1942ef7b-e5d0-49aa-9ffb-4df0fd73259e",
          "scriptId": "ccbf3646-83b1-46ea-a072-95f04d16b630",
          "execution": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "Error",
          "message": "‚ùå No wallet ID found. Please run \"Create Wallet\" first.",
          "checksum": "43c042683105df1dfc7b8ec8a41467a9",
          "id": "cc38cd8b-54f3-4bd6-889b-d51672a389f5",
          "timestamp": 1753377591324,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d6d18d9f-7118-4282-a8e3-087d11c87450",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "scriptId": "44766d40-475b-4981-b7f7-70646fbfe69d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response status is successful",
          "message": "expected 404 to be one of [ 200, 201, 202 ]",
          "stack": "AssertionError: expected 404 to be one of [ 200, 201, 202 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "13e634cbac26a62e25701d2be48c1e16",
          "id": "3caf19bd-be66-4b36-b88f-ff759afa8c58",
          "timestamp": 1753377591577,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d6d18d9f-7118-4282-a8e3-087d11c87450",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d747ce1c-2d07-4541-90c5-8072d08e4b1d",
          "scriptId": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
          "execution": "1e0c776f-aacc-4827-ab65-1446701044b7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Transaction history retrieved",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "dd76ed46df32c17e70b85f4886302c26",
          "id": "980c41e4-4e87-434d-b3d8-e7294902709a",
          "timestamp": 1753377591619,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d6d18d9f-7118-4282-a8e3-087d11c87450",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d747ce1c-2d07-4541-90c5-8072d08e4b1d",
          "scriptId": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
          "execution": "eb1523de-2278-4343-a65f-7270a2c3308b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "History data is valid",
          "message": "expected { ‚Ä¶(4) } to have property 'data'",
          "stack": "AssertionError: expected { ‚Ä¶(4) } to have property 'data'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "7216bff4e0b4fc9d02e5f63b997dc3ff",
          "id": "34e01307-3302-4cfb-af9d-bc96d7d5a587",
          "timestamp": 1753377591622,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d6d18d9f-7118-4282-a8e3-087d11c87450",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d747ce1c-2d07-4541-90c5-8072d08e4b1d",
          "scriptId": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
          "execution": "eb1523de-2278-4343-a65f-7270a2c3308b"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'length')",
          "checksum": "e774b6286904655bab7fadbd0aa88e6c",
          "id": "343319a3-e553-4dcf-979f-3267a7f2ddc7",
          "timestamp": 1753377591627,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
          "name": "Get Transaction History",
          "request": {
            "description": {
              "content": "Get transaction history for the wallet",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "transactions"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{wallet_id}}"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                "type": "text/javascript",
                "exec": [
                  "const walletId = pm.collectionVariables.get('wallet_id');",
                  "if (!walletId) {",
                  "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                  "}",
                  "console.log('üìú Getting transaction history for wallet:', walletId);"
                ],
                "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Transaction history retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "pm.test('History data is valid', function () {",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìú Transaction count:', response.data.length);"
                ],
                "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "f4050a74-e829-4982-aea2-408f921d37e4",
              "name": "Health Check",
              "request": {
                "description": {
                  "content": "Check if Bitnob API is healthy and accessible",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7170ff8-7e8a-4173-a993-ec650836dedd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Health check successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('API is healthy', function () {",
                      "    pm.expect(response).to.have.property('status');",
                      "});"
                    ],
                    "_lastExecutionId": "0d2813e6-51b7-4cfc-80d1-6de15f8cec1b"
                  }
                }
              ]
            },
            {
              "id": "1dbd3c94-0e17-4cd3-8dbe-73fb572a8974",
              "name": "Ping API",
              "request": {
                "description": {
                  "content": "Simple ping to test API connectivity",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "ping"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7098f58-0636-47e3-bd0c-5fa9a3d0057e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Ping successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log('üèì Ping response received');"
                    ],
                    "_lastExecutionId": "4180fdda-39aa-4926-b00b-971549073c0d"
                  }
                }
              ]
            },
            {
              "id": "f24f3978-4000-4d5e-bc90-e39b7f3834f7",
              "name": "Create Wallet",
              "request": {
                "description": {
                  "content": "Create a new Bitcoin wallet for testing",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "create"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1fdf7bea-5884-4a3e-a81e-f525f3229821",
                    "type": "text/javascript",
                    "exec": [
                      "// Generate unique wallet name",
                      "const walletName = 'SACCO_Wallet_' + pm.globals.get('timestamp');",
                      "pm.request.body.raw = JSON.stringify({",
                      "    name: walletName,",
                      "    description: 'SACCO Platform Test Wallet'",
                      "});",
                      "",
                      "console.log('üì± Creating wallet:', walletName);"
                    ],
                    "_lastExecutionId": "ac545199-1f44-47a0-817a-083298c52842"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2435ea9f-b41a-4f2e-a66d-600e22142d55",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Response contains wallet data', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('id');",
                      "});",
                      "",
                      "// Store wallet ID for subsequent requests",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('wallet_id', response.data.id);",
                      "    console.log('üí∞ Wallet ID saved:', response.data.id);",
                      "}"
                    ],
                    "_lastExecutionId": "10b6669c-b07f-4b57-ae2b-9024e2859db0"
                  }
                }
              ]
            },
            {
              "id": "7e6e7ed5-1043-4710-8693-35cfea4d753b",
              "name": "Get Wallet Details",
              "request": {
                "description": {
                  "content": "Get details of the created wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2254ad71-fa41-40c1-a752-3854fd7f6074",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üîç Getting details for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "888b7307-3b8b-4421-891e-45e6665b8502"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "351af2b8-d770-4959-b0e1-f7e4c94011d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Wallet details retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Wallet data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('balance');",
                      "});",
                      "",
                      "console.log('üí∞ Wallet Balance:', response.data.balance);"
                    ],
                    "_lastExecutionId": "5378d868-26ad-4881-9b85-fff1b402a3f0"
                  }
                }
              ]
            },
            {
              "id": "c9ca69a8-3993-43da-9161-6f7003c8527c",
              "name": "Get Wallet Balance",
              "request": {
                "description": {
                  "content": "Check the current balance of the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "wallets",
                    "{{wallet_id}}",
                    "balance"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "198642f4-e602-4b82-8a39-c5231dcec93f",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üí∞ Checking balance for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "fede663e-4524-4a65-89c8-15aac61773ce"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "49926e68-f065-4a68-88c3-a740ca255375",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Balance retrieved successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Balance data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('available_balance');",
                      "});",
                      "",
                      "console.log('üíµ Available Balance:', response.data.available_balance);"
                    ],
                    "_lastExecutionId": "bb617b40-3876-4401-9ad9-3600df805394"
                  }
                }
              ]
            },
            {
              "id": "ab07767a-7983-42eb-a015-3dfa1e48e2f7",
              "name": "Create Lightning Invoice",
              "request": {
                "description": {
                  "content": "Create a Lightning Network invoice for receiving payments",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "invoice"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d2548c7f-486d-407a-9ce1-53c476a55b49",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Create invoice for 1000 satoshis (0.00001 BTC)",
                      "const invoiceData = {",
                      "    amount: 1000,",
                      "    description: 'SACCO Platform Savings Deposit Test',",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    walletId: walletId",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(invoiceData);",
                      "console.log('‚ö° Creating Lightning invoice for 1000 sats');"
                    ],
                    "_lastExecutionId": "3ec6e6d3-43cf-4275-881b-2b61c4dfa002"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4b3aa4fd-0874-43b8-94b8-da7d3a1858e7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Lightning invoice created', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Invoice contains payment request', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('payment_request');",
                      "});",
                      "",
                      "// Store invoice ID for testing",
                      "if (response.data && response.data.id) {",
                      "    pm.collectionVariables.set('invoice_id', response.data.id);",
                      "    console.log('‚ö° Invoice ID saved:', response.data.id);",
                      "    console.log('üí∞ Payment Request:', response.data.payment_request);",
                      "}"
                    ],
                    "_lastExecutionId": "8ba08c51-d76d-4e0a-a9cd-1e30343ff56a"
                  }
                }
              ]
            },
            {
              "id": "b113fd7e-2ba1-4dbc-9347-4b40382b51bd",
              "name": "Send Lightning Payment",
              "request": {
                "description": {
                  "content": "Send a Lightning Network payment (requires valid invoice)",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "lightning",
                    "send"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": ""
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "704099a7-1e89-4a16-929a-9c3440ffad5b",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "",
                      "// Example Lightning invoice for testing (use a real testnet invoice)",
                      "const paymentData = {",
                      "    invoice: 'lnbc10u1p3xnhl2pp5jptserfk3zk4qy42tlucycrfwxhydvlemu9pqr93tuzlv9cc7g3sdqsvfhkcap3xyhx7un8cqzpgxqzjcsp5f8c52y2stc300gl6s4xswtjpc37hrnnr3c9wvtgjfuvqmpm35evq9qyyssqy4lgd8tj637qcjp05rdpxxykjenthxftej7a2zzmwrmrl70fyj9hvj0rewhzj7jfyuwkwycg8k4bf0l5p84nljfm6km5hpv4dhp4jc4cw5j9', // Replace with actual invoice",
                      "    amount: 1000,",
                      "    reference: pm.collectionVariables.get('payment_reference'),",
                      "    narration: 'SACCO Platform Test Payment'",
                      "};",
                      "",
                      "pm.request.body.raw = JSON.stringify(paymentData);",
                      "console.log('‚ö° Sending Lightning payment for 1000 sats');",
                      "console.log('‚ö†Ô∏è Note: Replace invoice with a real testnet invoice for actual testing');"
                    ],
                    "_lastExecutionId": "25e8e276-a95a-4d71-9f5a-f08588df3937"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "07eb550e-c0c1-4259-908d-b276c97007a0",
                    "type": "text/javascript",
                    "exec": [
                      "// Note: This will likely fail without a valid invoice",
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    pm.test('Lightning payment sent successfully', function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "    ",
                      "    const response = pm.response.json();",
                      "    console.log('‚ö° Payment successful:', response);",
                      "} else {",
                      "    console.log('‚ö†Ô∏è Payment failed (expected with dummy invoice)');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ],
                    "_lastExecutionId": "59d11b67-df03-4d05-b764-11b7a74020d8"
                  }
                }
              ]
            },
            {
              "id": "d998a2b0-5ef2-4e28-85d8-71302c408228",
              "name": "Generate Bitcoin Address",
              "request": {
                "description": {
                  "content": "Generate a new Bitcoin address for receiving funds",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "bitcoin",
                    "address",
                    "{{wallet_id}}"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c84bc633-c864-40c5-8a7c-643c9e1662f7",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üè† Generating Bitcoin address for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "f825022e-150a-4c5b-9275-d8736fc53c71"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f0ed605b-8a9c-4546-b27a-0381d08f0ed1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Bitcoin address generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Address is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.have.property('address');",
                      "});",
                      "",
                      "console.log('üè† Bitcoin Address:', response.data.address);"
                    ],
                    "_lastExecutionId": "14e7ea8f-9394-4dff-81c2-5e404e1e5c67"
                  }
                }
              ]
            },
            {
              "id": "4396390f-238d-4516-8f47-f522bd042517",
              "name": "Get Exchange Rates",
              "request": {
                "description": {
                  "content": "Get current Bitcoin exchange rates",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "rates"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "base",
                      "value": "BTC"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ccbf3646-83b1-46ea-a072-95f04d16b630",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Exchange rates retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('Rates data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "});",
                      "",
                      "if (response.data) {",
                      "    console.log('üí± Current BTC rates:', JSON.stringify(response.data, null, 2));",
                      "}"
                    ],
                    "_lastExecutionId": "b3ea38e1-a94e-4913-973d-bc5f4afa3eb9"
                  }
                }
              ]
            },
            {
              "id": "16f8355a-da61-4d1a-b939-a9a04ad3801c",
              "name": "Get Transaction History",
              "request": {
                "description": {
                  "content": "Get transaction history for the wallet",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "transactions"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "walletId",
                      "value": "{{wallet_id}}"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "44766d40-475b-4981-b7f7-70646fbfe69d",
                    "type": "text/javascript",
                    "exec": [
                      "const walletId = pm.collectionVariables.get('wallet_id');",
                      "if (!walletId) {",
                      "    throw new Error('‚ùå No wallet ID found. Please run \"Create Wallet\" first.');",
                      "}",
                      "console.log('üìú Getting transaction history for wallet:', walletId);"
                    ],
                    "_lastExecutionId": "c90a3b3c-d16b-49d6-959a-0bca9852e855"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89e95c66-9f21-4e62-a713-d3d005cb83b5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Transaction history retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "pm.test('History data is valid', function () {",
                      "    pm.expect(response).to.have.property('data');",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "console.log('üìú Transaction count:', response.data.length);"
                    ],
                    "_lastExecutionId": "eb1523de-2278-4343-a65f-7270a2c3308b"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "{{api_key}}",
                "key": "token"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ffa6119-3646-43c1-9a50-f860c6991269",
                "type": "text/javascript",
                "exec": [
                  "// Global pre-request script",
                  "console.log('üöÄ Starting Bitnob API test:', pm.info.requestName);",
                  "",
                  "// Set timestamp for reference generation",
                  "pm.globals.set('timestamp', Date.now());",
                  "",
                  "// Generate unique reference for payments",
                  "const reference = 'SACCO_' + pm.globals.get('timestamp');",
                  "pm.collectionVariables.set('payment_reference', reference);",
                  "",
                  "// Log current environment",
                  "console.log('üåç Environment: Sandbox');",
                  "console.log('üîó Base URL:', pm.collectionVariables.get('base_url'));"
                ],
                "_lastExecutionId": "c07b645d-ebfb-4b21-b481-423bbec42c0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2faa9b98-a7f8-4e2f-a1cd-85d0ce00e88e",
                "type": "text/javascript",
                "exec": [
                  "// Global test script",
                  "console.log('‚úÖ Response Status:', pm.response.code);",
                  "console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
                  "",
                  "// Basic response validation",
                  "pm.test('Response status is successful', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "// Log response for debugging",
                  "if (pm.response.code >= 400) {",
                  "    console.error('‚ùå Error Response:', pm.response.text());",
                  "} else {",
                  "    console.log('üìÑ Response Body:', pm.response.json());",
                  "}"
                ],
                "_lastExecutionId": "1e0c776f-aacc-4827-ab65-1446701044b7"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "https://sandboxapi.bitnob.co",
              "key": "base_url"
            },
            {
              "type": "string",
              "value": "{{BITNOB_API_KEY}}",
              "key": "api_key"
            },
            {
              "type": "string",
              "value": "",
              "key": "wallet_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "invoice_id"
            },
            {
              "type": "string",
              "value": "",
              "key": "payment_reference"
            }
          ],
          "info": {
            "_postman_id": "4978815b-a896-42a8-84bc-154002d98314",
            "name": "Bitnob API Testing Collection",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive testing collection for Bitnob API integration in Village SACCO platform",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d6d18d9f-7118-4282-a8e3-087d11c87450",
          "length": 10,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d747ce1c-2d07-4541-90c5-8072d08e4b1d",
          "scriptId": "89e95c66-9f21-4e62-a713-d3d005cb83b5"
        }
      }
    ],
    "error": null
  }
}